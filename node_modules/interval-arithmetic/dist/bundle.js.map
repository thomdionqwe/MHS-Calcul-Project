{"version":3,"file":"./bundle.js","mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,WAAY,GAAIH,GACG,iBAAZC,QACdA,QAAkB,SAAID,IAEtBD,EAAe,SAAIC,GACpB,CATD,CASGK,MAAM,KACT,O,WCVA,IAAIC,GAAiB,EACrB,GAA2B,oBAAjBC,aAA8B,CACtC,IAAIC,EAAc,IAAID,aAAa,GAC/BE,EAAc,IAAIC,YAAYF,EAAYG,QAC9CH,EAAY,GAAK,EACjBF,GAAiB,EACG,aAAjBG,EAAU,IAEXP,EAAOD,QAAU,SAAsBW,GAErC,OADAJ,EAAY,GAAKI,EACV,CAAEH,EAAU,GAAIA,EAAU,GACnC,EAMAP,EAAOD,QAAQY,KALf,SAAoBC,EAAIC,GAGtB,OAFAN,EAAU,GAAKK,EACfL,EAAU,GAAKM,EACRP,EAAY,EACrB,EAMAN,EAAOD,QAAQa,GAJf,SAAmBF,GAEjB,OADAJ,EAAY,GAAKI,EACVH,EAAU,EACnB,EAMAP,EAAOD,QAAQc,GAJf,SAAoBH,GAElB,OADAJ,EAAY,GAAKI,EACVH,EAAU,EACnB,GAEyB,aAAjBA,EAAU,IAElBP,EAAOD,QAAU,SAAsBW,GAErC,OADAJ,EAAY,GAAKI,EACV,CAAEH,EAAU,GAAIA,EAAU,GACnC,EAMAP,EAAOD,QAAQY,KALf,SAAoBC,EAAIC,GAGtB,OAFAN,EAAU,GAAKK,EACfL,EAAU,GAAKM,EACRP,EAAY,EACrB,EAMAN,EAAOD,QAAQa,GAJf,SAAmBF,GAEjB,OADAJ,EAAY,GAAKI,EACVH,EAAU,EACnB,EAMAP,EAAOD,QAAQc,GAJf,SAAoBH,GAElB,OADAJ,EAAY,GAAKI,EACVH,EAAU,EACnB,GAGAH,GAAiB,CAErB,CACA,IAAIA,EAAgB,CAClB,IAAIK,EAAS,IAAIK,OAAO,GACxBd,EAAOD,QAAU,SAAoBW,GAEnC,OADAD,EAAOM,cAAcL,EAAG,GAAG,GACpB,CAAED,EAAOO,aAAa,GAAG,GAAOP,EAAOO,aAAa,GAAG,GAChE,EAMAhB,EAAOD,QAAQY,KALf,SAAkBC,EAAIC,GAGpB,OAFAJ,EAAOQ,cAAcL,EAAI,GAAG,GAC5BH,EAAOQ,cAAcJ,EAAI,GAAG,GACrBJ,EAAOS,aAAa,GAAG,EAChC,EAMAlB,EAAOD,QAAQa,GAJf,SAAiBF,GAEf,OADAD,EAAOM,cAAcL,EAAG,GAAG,GACpBD,EAAOO,aAAa,GAAG,EAChC,EAMAhB,EAAOD,QAAQc,GAJf,SAAkBH,GAEhB,OADAD,EAAOM,cAAcL,EAAG,GAAG,GACpBD,EAAOO,aAAa,GAAG,EAChC,CAEF,CAEAhB,EAAOD,QAAQoB,KAAO,SAAST,GAC7B,OAAOV,EAAOD,QAAQc,GAAGH,KAAO,EAClC,EAEAV,EAAOD,QAAQqB,SAAW,SAASV,GAEjC,OADQV,EAAOD,QAAQc,GAAGH,IACd,IAAO,IAAM,IAC3B,EAEAV,EAAOD,QAAQsB,SAAW,SAASX,GACjC,IAAIE,EAAKZ,EAAOD,QAAQa,GAAGF,GACvBG,EAAKb,EAAOD,QAAQc,GAAGH,GACvBY,EAAS,QAALT,EAIR,OAHQ,WAALA,IACDS,GAAM,GAAG,IAEJ,CAACV,EAAIU,EACd,EAEAtB,EAAOD,QAAQwB,aAAe,SAASb,GAErC,QAAc,WADLV,EAAOD,QAAQc,GAAGH,GAE7B,C,6BClGA,IAAIc,EAAa,EAAQ,KAErBC,EAAkBC,KAAKC,IAAI,GAAI,MAC/BC,GAAa,IAAK,EAEtB5B,EAAOD,QAEP,SAAmB8B,EAAGC,GACpB,GAAGC,MAAMF,IAAME,MAAMD,GACnB,OAAOE,IAET,GAAGH,IAAMC,EACP,OAAOD,EAET,GAAS,IAANA,EACD,OAAGC,EAAI,GACGL,EAEDA,EAGX,IAAIZ,EAAKW,EAAWX,GAAGgB,GACnBjB,EAAKY,EAAWZ,GAAGiB,GAgBvB,OAfIC,EAAID,GAAQA,EAAI,EACfjB,IAAOgB,GACRf,GAAM,EACND,EAAK,GAELA,GAAM,EAGE,IAAPA,GACDA,EAAKgB,EACLf,GAAM,GAEND,GAAM,EAGHY,EAAWb,KAAKC,EAAIC,EAC7B,C,wKCzCA,eACA,WAEMoB,EAAQ,kBACRC,EAAS,mBAKTC,EAAY,CAOhBC,OAAQH,EAMRI,QAASH,EACTI,YAAaL,EAAQ,EACrBM,aAAcL,EAAS,EACvBM,aAAsB,EAARP,EACdQ,cAAwB,EAATP,EAcXQ,QACF,OAAO,IAAI,EAAAC,SACT,UAAMC,KAAKlB,KAAKgB,GAChB,UAAMG,KAAKnB,KAAKgB,GAEpB,EAcII,SACF,OAAO,IAAI,EAAAH,SAASV,EAAOC,EAC7B,EAcIa,cACF,OAAO,IAAI,EAAAJ,SAASR,EAAUG,YAAaH,EAAUI,aACvD,EAcIS,eACF,OAAO,IAAI,EAAAL,SAASR,EAAUK,aAAcL,EAAUM,cACxD,EAcIQ,WACF,OAAO,IAAI,EAAAN,SAAS,EACtB,EAaIO,UACF,OAAO,IAAI,EAAAP,SAAS,EACtB,EAeIQ,YACF,OAAO,IAAI,EAAAR,UAAWS,UACxB,EAeIC,YACF,OAAO,IAAI,EAAAV,UAAWW,UACxB,GAGF,UAAenB,C,88BC1Jf,eAcS,wEAd0C,WAAQ,IAC3D,iBAcS,EAAAoB,MAdF,UACP,kBAagB,EAAApB,UAbT,UAEP,kBACA,YACA,YACA,YACA,YACA,YAEMqB,EAAgBC,OAAOC,OAAO,WAAiB,UAAW,UAAOC,EAAMC,EAAOC,EAAYC,EAAYC,EAASC,EAAe,CAAET,MAAA,YAEtI,UAAeC,EAGf,YACA,YACA,YACA,YACA,YACA,W,00BC3BA,kBACA,WAyDA,MAAaS,EAaXC,YAAYtD,EAAwBC,GAClC,GATF,KAAAD,GAAa,EAMb,KAAAC,GAAa,IAGLsD,gBAAgBF,GAGpB,OAFAG,QAAQC,IAAI,oBACZD,QAAQC,IAAIzD,EAAIC,GACT,IAAIoD,EAAUrD,EAAIC,GAG3B,QAAkB,IAAPD,QAAoC,IAAPC,EAAoB,CAI1D,GAAI+C,EAAMU,WAAW1D,GAAK,CACxB,IAAKgD,EAAMW,YAAY3D,GACrB,MAAM,IAAI4D,UAAU,+CAEtB5D,EAAMA,EAAgBA,E,CAExB,GAAIgD,EAAMU,WAAWzD,GAAK,CACxB,IAAK+C,EAAMW,YAAY1D,GACrB,MAAM2D,UAAU,+CAElB3D,EAAMA,EAAgBA,E,MAEnB,SAAkB,IAAPD,EAIhB,OAAI6D,MAAMC,QAAQ9D,GACT,IAAI+B,EAAS/B,EAAG,GAAIA,EAAG,IAGzB,IAAI+B,EAAS/B,EAAIA,GAIxBA,EAAKC,EAAK,C,CAEZsD,KAAKT,OAAO9C,EAAcC,EAC5B,CAQA8D,UAAUC,GACR,OAAOT,KAAKU,IAAID,EAAGA,EACrB,CAgCAE,QAAQlE,EAAYC,GAClB,OAAOsD,KAAKU,IAAI,UAAMjC,KAAKhC,GAAK,UAAMiC,KAAKhC,GAC7C,CAOAkE,iBAAiBH,GACf,OAAOT,KAAKW,QAAQF,EAAGA,EACzB,CAUAC,IAAIjE,EAAYC,GAGd,OAFAsD,KAAKvD,GAAKA,EACVuD,KAAKtD,GAAKA,EACHsD,IACT,CAWAT,OAAO9C,EAAYC,GACjB,GAAkB,iBAAPD,GAAiC,iBAAPC,EACnC,MAAM2D,UAAU,8CAElB,OAAIzC,MAAMnB,IAAOmB,MAAMlB,IAAOD,EAAKC,EAC1BsD,KAAKb,WAEPa,KAAKU,IAAIjE,EAAIC,EACtB,CAOAyC,WACE,OAAOa,KAAKU,IAAIG,OAAOC,kBAAmBD,OAAOE,kBACnD,CAOA9B,WACE,OAAOe,KAAKU,IAAIG,OAAOE,kBAAmBF,OAAOC,kBACnD,CAiBAE,KAAKvE,EAAYC,GACf,OAAOsD,KAAKT,OAAO,UAAM0B,SAASxE,GAAK,UAAMyE,SAASxE,GACxD,CAiBAyE,aAAa1E,EAAYC,GACvB,OAAOsD,KAAKT,OAAO,UAAM0B,SAASxE,GAAKC,EACzC,CAiBA0E,cAAc3E,EAAYC,GACxB,OAAOsD,KAAKT,OAAO9C,EAAI,UAAMyE,SAASxE,GACxC,CAMA2E,UACE,MAAO,CAACrB,KAAKvD,GAAIuD,KAAKtD,GACxB,CAaA4E,QACE,OAAO,IAAI9C,GAAWkC,IAAIV,KAAKvD,GAAIuD,KAAKtD,GAC1C,EA3OF,cAoQA,MAAM8B,EApBN,SAAiB+C,GACf,SAASC,IACP,IACE,IAAIC,EAAMC,UAAUC,OAAQC,EAAOtB,MAAMmB,GAAMI,EAAM,EACrDA,EAAMJ,EACNI,IAEAD,EAAKC,GAAOH,UAAUG,GAIxB,OAAO,IAAKC,SAASC,UAAUC,KAAKC,MAAMV,EAAO,CAAC,MAAMW,OAAON,IACjE,CAEA,OADAJ,EAAOO,UAAYR,EAAMQ,UAClBP,CACT,CAKiBW,CAAQrC,GAKhB,EAAAtB,SAAAA,EAFTA,EAAS7C,QAAU6C,C,y2BClUnB,eACA,WACA,YAEA,YACA,YAsDA,SAAgB4D,EAAsB1E,GACpC,OAAI+B,EAAM4C,QAAQ3E,GACT,UAAUwB,MAEfO,EAAM6C,OAAO5E,GACF,IAATA,EAAEjB,GACS,IAATiB,EAAEhB,GAEG,UAAUsC,MAGV,IAAI,EAAAR,SAASqC,OAAOE,kBAAmB,UAAMwB,MAAM,EAAG7E,EAAEjB,KAGpD,IAATiB,EAAEhB,GAEG,IAAI,EAAA8B,SAAS,UAAMgE,MAAM,EAAG9E,EAAEhB,IAAKmE,OAAOC,mBAG1C,UAAU5B,MAKd,IAAI,EAAAV,SAAS,UAAMgE,MAAM,EAAG9E,EAAEhB,IAAK,UAAM6F,MAAM,EAAG7E,EAAEjB,IAE/D,CAiIA,SAAgBgG,EAAQ/E,EAAanB,GACnC,GAAIkD,EAAM4C,QAAQ3E,IAAMnB,EAAI,EAE1B,OAAO,UAAU2C,MAInB,GAAiB,iBAAN3C,EAAgB,CACzB,IAAKkD,EAAMW,YAAY7D,GACrB,OAAO,UAAU2C,MAEnB3C,EAAIA,EAAEE,E,CAGR,MAAMiG,EAAQ,EAAInG,EAClB,GAAImB,EAAEhB,GAAK,EAAG,CAEZ,GAAKmE,OAAO8B,cAAcpG,IAA8B,IAAP,EAAJA,GAAc,CAEzD,MAAMqG,EAAK,UAAMC,OAAOnF,EAAEjB,GAAIiG,GACxBI,EAAK,UAAMC,OAAOrF,EAAEhB,GAAIgG,GAC9B,OAAO,IAAI,EAAAlE,UAAUoE,GAAKE,E,CAG5B,OAAO,UAAU5D,K,CACZ,GAAIxB,EAAEjB,GAAK,EAAG,CAEnB,MAAMuG,EAAK,UAAMH,MAAMnF,EAAEhB,GAAIgG,GAC7B,GAAK7B,OAAO8B,cAAcpG,IAA8B,IAAP,EAAJA,GAAc,CAEzD,MAAM0G,GAAM,UAAMJ,OAAOnF,EAAEjB,GAAIiG,GAC/B,OAAO,IAAI,EAAAlE,SAASyE,EAAID,E,CAE1B,OAAO,IAAI,EAAAxE,SAAS,EAAGwE,E,CAGvB,OAAO,IAAI,EAAAxE,SAAS,UAAMuE,MAAMrF,EAAEjB,GAAIiG,GAAQ,UAAMG,MAAMnF,EAAEhB,GAAIgG,GAEpE,CA7NA,gBAAqBhF,EAAaC,GAChC,GAAI8B,EAAM4C,QAAQ3E,IAAM+B,EAAM4C,QAAQ1E,GACpC,OAAO,UAAUuB,MAEnB,MAAMgE,EAAKxF,EAAEjB,GAAK,EAAIkB,EAAElB,GAAKkB,EAAEjB,GAC/B,IAAIH,EAAImB,EAAEjB,GAAKyG,EAIf,OAHW3G,EAAPA,EAAI,EAAOgB,KAAK4F,KAAK5G,GAChBgB,KAAK6F,MAAM7G,GAEboD,EAAW0D,IAAI3F,EAAGiC,EAAW2D,IAAI3F,EAAG,IAAI,EAAAa,SAASjC,IAC1D,EAkBA,0BAgEA,eAAgBiB,EAAIE,EAAagF,GAC/B,GAAIjD,EAAM4C,QAAQ3E,GAChB,OAAO,UAAUwB,MAEnB,GAAqB,iBAAVwD,EAAoB,CAC7B,IAAKjD,EAAMW,YAAYsC,GACrB,OAAO,UAAUxD,MAEnBwD,EAAQA,EAAMjG,E,CAGhB,GAAc,IAAViG,EACF,OAAa,IAAThF,EAAEjB,IAAqB,IAATiB,EAAEhB,GAEX,UAAUwC,MAGV,UAAUH,IAEd,GAAI2D,EAAQ,EAEjB,OAAOlF,EAAI4E,EAAsB1E,IAAKgF,GAIxC,GAAI7B,OAAO8B,cAAcD,GAAmB,CAE1C,GAAIhF,EAAEhB,GAAK,EAAG,CAIZ,MAAMkG,EAAK,UAAMG,OAAOrF,EAAEhB,GAAIgG,GACxBI,EAAK,UAAMD,OAAOnF,EAAEjB,GAAIiG,GAC9B,OAAoB,IAAP,EAARA,GAEI,IAAI,EAAAlE,UAAUsE,GAAKF,GAGnB,IAAI,EAAApE,SAASoE,EAAIE,E,CAErB,OAAIpF,EAAEjB,GAAK,EAEI,IAAP,EAARiG,GACI,IAAI,EAAAlE,UAAU,UAAMuE,OAAOrF,EAAEjB,GAAIiG,GAAQ,UAAMG,MAAMnF,EAAEhB,GAAIgG,IAI3D,IAAI,EAAAlE,SAAS,EAAG,UAAMqE,MAAMtF,KAAKgG,KAAK7F,EAAEjB,GAAIiB,EAAEhB,IAAKgG,IAIrD,IAAI,EAAAlE,SAAS,UAAMuE,MAAMrF,EAAEjB,GAAIiG,GAAQ,UAAMG,MAAMnF,EAAEhB,GAAIgG,G,CAIlE,OADAzC,QAAQuD,KAAK,yFACN,UAAUtE,KAErB,EAeA,gBAAqBxB,GACnB,OAAO+E,EAAQ/E,EAAG,EACpB,EAiBA,W,g4BCtNA,eACA,WACA,YACA,YACA,YAwCA,SAAgB+F,EAAS/F,EAAaC,GACpC,OAAO,IAAI,EAAAa,SAAS,UAAMkF,MAAMhG,EAAEjB,GAAIkB,EAAEjB,IAAK,UAAMiH,MAAMjG,EAAEhB,GAAIiB,EAAElB,IACnE,CAwDA,SAAgBmH,EAASlG,EAAaC,GACpC,GAAI8B,EAAM4C,QAAQ3E,IAAM+B,EAAM4C,QAAQ1E,GACpC,OAAO,UAAUuB,MAEnB,MAAM2E,EAAKnG,EAAEjB,GACPqH,EAAKpG,EAAEhB,GACPkG,EAAKjF,EAAElB,GACPqG,EAAKnF,EAAEjB,GACPqH,EAAM,IAAI,EAAAvF,SA4EhB,OA3EIqF,EAAK,EACHC,EAAK,EACHlB,EAAK,EACHE,EAAK,GAEPiB,EAAItH,GAAKc,KAAKyG,IAAI,UAAMC,MAAMJ,EAAIf,GAAK,UAAMmB,MAAMH,EAAIlB,IACvDmB,EAAIrH,GAAKa,KAAKgG,IAAI,UAAMW,MAAML,EAAIjB,GAAK,UAAMsB,MAAMJ,EAAIhB,MAGvDiB,EAAItH,GAAK,UAAMwH,MAAMH,EAAIlB,GACzBmB,EAAIrH,GAAK,UAAMwH,MAAML,EAAIjB,IAGvBE,EAAK,GAEPiB,EAAItH,GAAK,UAAMwH,MAAMJ,EAAIf,GACzBiB,EAAIrH,GAAK,UAAMwH,MAAMJ,EAAIhB,KAGzBiB,EAAItH,GAAK,EACTsH,EAAIrH,GAAK,GAITkG,EAAK,EACHE,EAAK,GAEPiB,EAAItH,GAAK,UAAMwH,MAAMJ,EAAIf,GACzBiB,EAAIrH,GAAK,UAAMwH,MAAML,EAAIjB,KAGzBmB,EAAItH,GAAK,UAAMwH,MAAMH,EAAIhB,GACzBiB,EAAIrH,GAAK,UAAMwH,MAAML,EAAIjB,IAGvBE,EAAK,GAEPiB,EAAItH,GAAK,UAAMwH,MAAMJ,EAAIf,GACzBiB,EAAIrH,GAAK,UAAMwH,MAAMJ,EAAIlB,KAGzBmB,EAAItH,GAAK,EACTsH,EAAIrH,GAAK,GAKXoH,EAAK,EACHlB,EAAK,EACHE,EAAK,GAEPiB,EAAItH,GAAK,UAAMwH,MAAMH,EAAIlB,GACzBmB,EAAIrH,GAAK,UAAMwH,MAAMJ,EAAIhB,KAGzBiB,EAAItH,GAAK,UAAMwH,MAAMH,EAAIlB,GACzBmB,EAAIrH,GAAK,UAAMwH,MAAML,EAAIf,IAGvBA,EAAK,GAEPiB,EAAItH,GAAK,UAAMwH,MAAMJ,EAAIjB,GACzBmB,EAAIrH,GAAK,UAAMwH,MAAMJ,EAAIhB,KAGzBiB,EAAItH,GAAK,EACTsH,EAAIrH,GAAK,IAKbqH,EAAItH,GAAK,EACTsH,EAAIrH,GAAK,GAGNqH,CACT,CA8CA,SAAgBI,EAAOzG,EAAaC,GAClC,OAAI8B,EAAM4C,QAAQ3E,IAAM+B,EAAM4C,QAAQ1E,GAC7B,UAAUuB,MAEfO,EAAM6C,OAAO3E,GACF,IAATA,EAAElB,GACS,IAATkB,EAAEjB,GACG0H,EAASC,KAAK3G,GAEd0G,EAASE,SAAS5G,EAAGC,EAAElB,IAGnB,IAATkB,EAAEjB,GACG0H,EAASG,SAAS7G,EAAGC,EAAEjB,IAEvB,UAAUwC,MAIdkF,EAASI,QAAQ9G,EAAGC,EAE/B,CArOA,eAAoBD,EAAaC,GAC/B,OAAO,IAAI,EAAAa,SAAS,UAAMiG,MAAM/G,EAAEjB,GAAIkB,EAAElB,IAAK,UAAMiI,MAAMhH,EAAEhB,GAAIiB,EAAEjB,IACnE,EAiBA,aAQa,EAAA2G,IAAMI,EAkDnB,aA2Fa,EAAAH,IAAMM,EAwCnB,WA2Ba,EAAAe,IAAMR,EAgBnB,oBAAyBzG,GACvB,OAAO,IAAI,EAAAc,SAASd,EAAEjB,GAAIiB,EAAEhB,GAC9B,EA6BA,oBAAyBgB,GACvB,OAAO,IAAI,EAAAc,UAAUd,EAAEhB,IAAKgB,EAAEjB,GAChC,C,01BCrTA,eACA,WACA,YACA,YAQA,mBAAwBiB,EAAaC,GACnC,MAAMkG,EAAKnG,EAAEjB,GACPqH,EAAKpG,EAAEhB,GACPkG,EAAKjF,EAAElB,GACPqG,EAAKnF,EAAEjB,GACPqH,EAAM,IAAI,EAAAvF,SA0BhB,OAzBIsF,EAAK,EACHhB,EAAK,GACPiB,EAAItH,GAAK,UAAM+F,MAAMsB,EAAIlB,GACzBmB,EAAIrH,GAAK,UAAM6F,MAAMsB,EAAIf,KAEzBiB,EAAItH,GAAK,UAAM+F,MAAMqB,EAAIjB,GACzBmB,EAAIrH,GAAK,UAAM6F,MAAMuB,EAAIhB,IAElBe,EAAK,EACVf,EAAK,GACPiB,EAAItH,GAAK,UAAM+F,MAAMsB,EAAIhB,GACzBiB,EAAIrH,GAAK,UAAM6F,MAAMsB,EAAIf,KAEzBiB,EAAItH,GAAK,UAAM+F,MAAMqB,EAAIjB,GACzBmB,EAAIrH,GAAK,UAAM6F,MAAMuB,EAAIlB,IAGvBE,EAAK,GACPiB,EAAItH,GAAK,UAAM+F,MAAMsB,EAAIhB,GACzBiB,EAAIrH,GAAK,UAAM6F,MAAMsB,EAAIjB,KAEzBmB,EAAItH,GAAK,UAAM+F,MAAMqB,EAAIf,GACzBiB,EAAIrH,GAAK,UAAM6F,MAAMuB,EAAIlB,IAGtBmB,CACT,EAQA,oBAAyBrG,EAAa+C,GACpC,OAAa,IAAT/C,EAAEjB,IAAqB,IAATiB,EAAEhB,GACXgB,EAGL+B,EAAM6C,OAAO5E,GAER,UAAUsB,MAGftB,EAAEhB,GAAK,EAEF,IAAI,EAAA8B,SAASqC,OAAOE,kBAAmB,UAAMwB,MAAM7E,EAAEhB,GAAI+D,IAGzD,IAAI,EAAAjC,SAAS,UAAMgE,MAAM9E,EAAEjB,GAAIgE,GAAII,OAAOC,kBAErD,EAQA,oBAAyBpD,EAAa+C,GACpC,OAAa,IAAT/C,EAAEjB,IAAqB,IAATiB,EAAEhB,GACXgB,EAGL+B,EAAM6C,OAAO5E,GAER,UAAUsB,MAGftB,EAAEhB,GAAK,EAEF,IAAI,EAAA8B,SAAS,UAAMgE,MAAM9E,EAAEhB,GAAI+D,GAAII,OAAOC,mBAG1C,IAAI,EAAAtC,SAASqC,OAAOE,kBAAmB,UAAMwB,MAAM7E,EAAEjB,GAAIgE,GAEpE,EAOA,gBAAqB/C,GACnB,OAAa,IAATA,EAAEjB,IAAqB,IAATiB,EAAEhB,GACXgB,EAEF,UAAUsB,KACnB,C,+7BCzGA,eACA,WACA,YACA,YACA,YAwCA,SAAgBkB,EAAIxC,GAClB,GAAI+B,EAAM4C,QAAQ3E,GAChB,OAAO,UAAUwB,MAEnB,MAAM0F,EAAIlH,EAAEjB,IAAM,EAAIoE,OAAOE,kBAAoB,UAAM8D,MAAMnH,EAAEjB,IAC/D,OAAO,IAAI,EAAA+B,SAASoG,EAAG,UAAME,MAAMpH,EAAEhB,IACvC,CAiOA,SAAgBqI,EAAMrH,GACpB,OAAI+B,EAAM4C,QAAQ3E,GACT,EAEF,UAAMiG,MAAMjG,EAAEhB,GAAIgB,EAAEjB,GAC7B,CAhQA,EAAAuI,IAAA,SAAoBtH,GAClB,OAAI+B,EAAM4C,QAAQ3E,GACT,UAAUwB,MAEZ,IAAI,EAAAV,SAAS,UAAMyG,MAAMvH,EAAEjB,IAAK,UAAMyI,MAAMxH,EAAEhB,IACvD,EAeA,QAYa,EAAAyI,GAAKjF,EAEL,EAAAkF,WAAalF,EAAI,IAAI,EAAA1B,SAAS,GAAI,KAe/C,iBAAsBd,GACpB,OAAI+B,EAAM4C,QAAQ3E,GACT,UAAUwB,MAEZS,EAAWgF,IAAIzE,EAAIxC,GAAI,EAAA0H,WAChC,EAEa,EAAAC,UAAYnF,EAAI,IAAI,EAAA1B,SAAS,EAAG,IAe7C,gBAAqBd,GACnB,OAAI+B,EAAM4C,QAAQ3E,GACT,UAAUwB,MAEZS,EAAWgF,IAAIzE,EAAIxC,GAAI,EAAA2H,UAChC,EAuBA,gBAAqB3H,EAAaC,GAChC,MAAM2H,EAAO7F,EAAM4C,QAAQ3E,GACrB6H,EAAO9F,EAAM4C,QAAQ1E,GAC3B,OAAI2H,GAAQC,EACH,UAAUrG,MACRoG,EACF3H,EAAE2D,QACAiE,EACF7H,EAAE4D,QAEF,IAAI,EAAA9C,SAASjB,KAAKyG,IAAItG,EAAEjB,GAAIkB,EAAElB,IAAKc,KAAKgG,IAAI7F,EAAEhB,GAAIiB,EAAEjB,IAE/D,EAiBA,wBAA6BgB,EAAaC,GACxC,GAAI8B,EAAM4C,QAAQ3E,IAAM+B,EAAM4C,QAAQ1E,GACpC,OAAO,UAAUuB,MAEnB,MAAMzC,EAAKc,KAAKgG,IAAI7F,EAAEjB,GAAIkB,EAAElB,IACtBC,EAAKa,KAAKyG,IAAItG,EAAEhB,GAAIiB,EAAEjB,IAC5B,OAAID,GAAMC,EACD,IAAI,EAAA8B,SAAS/B,EAAIC,GAEnB,UAAUwC,KACnB,EAwBA,iBAAsBxB,EAAaC,GACjC,IAAK8B,EAAM+F,iBAAiB9H,EAAGC,GAC7B,MAAM8H,MAAM,4CAEd,OAAO,IAAI,EAAAjH,SAASjB,KAAKyG,IAAItG,EAAEjB,GAAIkB,EAAElB,IAAKc,KAAKgG,IAAI7F,EAAEhB,GAAIiB,EAAEjB,IAC7D,EA+BA,sBAA2BgB,EAAaC,GACtC,GAAI8B,EAAM4C,QAAQ3E,IAAM+B,EAAMiG,QAAQ/H,GACpC,OAAO,UAAUuB,MAEnB,GAAIO,EAAM+F,iBAAiB9H,EAAGC,GAAI,CAChC,GAAID,EAAEjB,GAAKkB,EAAElB,IAAMkB,EAAEjB,GAAKgB,EAAEhB,GAE1B,MAAM+I,MAAM,8DAId,OAAK9H,EAAElB,IAAMiB,EAAEjB,IAAMkB,EAAEjB,KAAOiJ,KAAchI,EAAEjB,IAAMgB,EAAEhB,IAAMiB,EAAElB,MAAO,IAC5D,UAAUyC,MASfvB,EAAElB,IAAMiB,EAAEjB,IACL,IAAI,EAAA+B,UAAW2C,aAAaxD,EAAEjB,GAAIgB,EAAEhB,KAItC,IAAI,EAAA8B,UAAW4C,cAAc1D,EAAEjB,GAAIkB,EAAElB,G,CAE9C,OAAOiB,EAAE4D,OACX,EAwBA,UAWa,EAAAsE,IAAMb,EAwBnB,eAAoBrH,GAClB,OAAI+B,EAAM4C,QAAQ3E,IAAM+B,EAAMiG,QAAQhI,GAC7B,UAAUwB,MAEfxB,EAAEjB,IAAM,EACHiB,EAAE4D,QAEP5D,EAAEhB,IAAM,EACHiD,EAAW2E,SAAS5G,GAEtB,IAAI,EAAAc,SAAS,EAAGjB,KAAKgG,KAAK7F,EAAEjB,GAAIiB,EAAEhB,IAC3C,EAkBA,eAAoBgB,EAAaC,GAC/B,MAAM2H,EAAO7F,EAAM4C,QAAQ3E,GACrB6H,EAAO9F,EAAM4C,QAAQ1E,GAC3B,OAAI2H,GAAQC,EACH,UAAUrG,MACRoG,EACF3H,EAAE2D,QACAiE,EACF7H,EAAE4D,QAEF,IAAI,EAAA9C,SAASjB,KAAKgG,IAAI7F,EAAEjB,GAAIkB,EAAElB,IAAKc,KAAKgG,IAAI7F,EAAEhB,GAAIiB,EAAEjB,IAE/D,EAiBA,eAAoBgB,EAAaC,GAC/B,MAAM2H,EAAO7F,EAAM4C,QAAQ3E,GACrB6H,EAAO9F,EAAM4C,QAAQ1E,GAC3B,OAAI2H,GAAQC,EACH,UAAUrG,MACRoG,EACF3H,EAAE2D,QACAiE,EACF7H,EAAE4D,QAEF,IAAI,EAAA9C,SAASjB,KAAKyG,IAAItG,EAAEjB,GAAIkB,EAAElB,IAAKc,KAAKyG,IAAItG,EAAEhB,GAAIiB,EAAEjB,IAE/D,EAkBA,iBAAsBgB,GAEpB,OAAO,IAAI,EAAAc,UAAWkC,IAAIhD,EAAEjB,GAAIiB,EAAEhB,GACpC,C,u2BCjZA,kBA2CA,SAASmJ,EAAOC,EAAQC,GAGtB,IAAKD,EAEH,MAAM,IAAIL,MAAMM,GAAW,mBAE/B,CAEA,SAASC,EAAUF,EAAQ3I,GACzB,IAAK8I,SAASH,GAEZ,OAAOD,EAAOC,IAAM3I,EAAG,uBAAuB2I,WAAW3I,KAG3D0I,EAAOtI,KAAK2I,IAAIJ,EAAI3I,GAhBV,KAgBoB,YAAY2I,oBAAoB3I,IAChE,CAEA,SAAgBgJ,EAAYzI,EAAwBC,GAClDD,EAAI4C,MAAMC,QAAQ7C,GAAKA,EAAIA,EAAE2D,UAC7B1D,EAAI2C,MAAMC,QAAQ5C,GAAKA,EAAIA,EAAE0D,UAC7B2E,EAAUtI,EAAE,GAAIC,EAAE,IAClBqI,EAAUtI,EAAE,GAAIC,EAAE,GACpB,CA2EA,SAAgByI,EAAS1I,EAAaC,GACpC,OAAI8B,EAAM4C,QAAQ3E,KAAM+B,EAAM4C,QAAQ1E,IAG/BD,EAAEhB,GAAKiB,EAAElB,EAClB,CAgCA,SAAgB4J,EAAY3I,EAAaC,GACvC,OAAI8B,EAAM4C,QAAQ3E,KAAM+B,EAAM4C,QAAQ1E,IAG/BD,EAAEjB,GAAKkB,EAAEjB,EAClB,CAwBA,SAAgB4J,EAAc5I,EAAaC,GACzC,OAAI8B,EAAM4C,QAAQ3E,KAAM+B,EAAM4C,QAAQ1E,IAG/BD,EAAEhB,IAAMiB,EAAElB,EACnB,CAeA,SAAgB8J,EAAiB7I,EAAaC,GAC5C,OAAI8B,EAAM4C,QAAQ3E,KAAM+B,EAAM4C,QAAQ1E,IAG/BD,EAAEjB,IAAMkB,EAAEjB,EACnB,CAtMA,iBAAsBgB,EAAaC,GACjC,OAAI8B,EAAM4C,QAAQ3E,GACT+B,EAAM4C,QAAQ1E,IAEf8B,EAAM4C,QAAQ1E,IAAMD,EAAEjB,KAAOkB,EAAElB,IAAMiB,EAAEhB,KAAOiB,EAAEjB,EAC1D,EAsBA,gBAOA,0BAA+BgB,EAAwBC,GAErDwI,EAAYzI,EAAGC,GACfD,EAAI4C,MAAMC,QAAQ7C,GAAKA,EAAIA,EAAE2D,UAC7B1D,EAAI2C,MAAMC,QAAQ5C,GAAKA,EAAIA,EAAE0D,UAC7BwE,EAAOnI,EAAE,IAAMC,EAAE,GAAI,GAAGD,EAAE,gCAAgCC,EAAE,MAC5DkI,EAAOlI,EAAE,IAAMD,EAAE,GAAI,GAAGC,EAAE,gCAAgCD,EAAE,KAC9D,EAmCA,oBAAyBA,EAAaC,GACpC,OAAI8B,EAAM4C,QAAQ3E,IACR+B,EAAM4C,QAAQ1E,GAEjB8B,EAAM4C,QAAQ1E,IAAMD,EAAEhB,GAAKiB,EAAElB,IAAMiB,EAAEjB,GAAKkB,EAAEjB,EACrD,EA0BA,aAWa,EAAA8J,GAAKJ,EA0BlB,gBAWa,EAAAK,GAAKJ,EAkBlB,kBAWa,EAAAK,IAAMJ,EASnB,qBAWa,EAAAK,IAAMJ,C,+2BC7OnB,eACA,WACA,YAEA,YACA,YACA,YACA,YAaA,SAASK,EAAalJ,GACpB,OAAQuI,SAASvI,EAAEjB,KAAOiB,EAAEjB,KAAOiB,EAAEhB,EACvC,CAMA,SAASmK,EAAeC,GACtB,GAAIA,EAASrK,GAAK,EAChB,GAAIqK,EAASrK,MAAO,IAClBqK,EAASrK,GAAK,EACdqK,EAASpK,GAAKiJ,QACT,CACL,MAAMpJ,EAAIgB,KAAK4F,MAAM2D,EAASrK,GAAK,UAAU4B,cAC7CyI,EAASrK,IAAM,UAAU4B,aAAe9B,EACxCuK,EAASpK,IAAM,UAAU2B,aAAe9B,C,CAG5C,OAAOuK,CACT,CA+CA,SAAgBC,EAAIrJ,GAClB,GAAI+B,EAAM4C,QAAQ3E,IAAMkJ,EAAalJ,GACnC,OAAO,UAAUwB,MAInB,MAAM8H,GAAQ,IAAI,EAAAxI,UAAWkC,IAAIhD,EAAEjB,GAAIiB,EAAEhB,IACzCmK,EAAeG,GAEf,MAAMC,EAAM,UAAUpI,SAChBqI,EAAItH,EAAQuH,KAAKH,EAAOC,GAC9B,GAAIzH,EAAKuF,MAAMmC,IAAMD,EAAIxK,GACvB,OAAO,IAAI,EAAA+B,UAAU,EAAG,GAK1B,GAAI0I,EAAEzK,IAAM,UAAUyB,QAAS,CAC7B,MAAMkJ,EAAOL,EAAIpH,EAAW0D,IAAI6D,EAAG,UAAUvI,KAC7C,OAAOgB,EAAW2E,SAAS8C,E,CAG7B,MAAM3K,EAAKyK,EAAEzK,GACPC,EAAKwK,EAAExK,GACP2K,EAAM,UAAMC,MAAM5K,GAClB6K,EAAM,UAAMC,MAAM/K,GAExB,OAAIC,GAAM,UAAUuB,OAGX,IAAI,EAAAO,SAAS6I,EAAKE,GAChB7K,GAAMuK,EAAIxK,GAGZ,IAAI,EAAA+B,UAAU,EAAGjB,KAAKgG,IAAI8D,EAAKE,IAG/B,IAAI,EAAA/I,UAAU,EAAG,EAE5B,CAvCA,QAkFA,eAAoBd,GAClB,OAAI+B,EAAM4C,QAAQ3E,IAAMkJ,EAAalJ,GAC5B,UAAUwB,MAEZ6H,EAAIpH,EAAW0D,IAAI3F,EAAG,UAAUkB,SACzC,EA+BA,eAAoBlB,GAClB,GAAI+B,EAAM4C,QAAQ3E,IAAMkJ,EAAalJ,GACnC,OAAO,UAAUwB,MAInB,MAAM8H,GAAQ,IAAI,EAAAxI,UAAWkC,IAAIhD,EAAEjB,GAAIiB,EAAEhB,IACzCmK,EAAeG,GAEf,MAAMS,EAAK,UAAU9I,GACrB,IAAIuI,EAAItH,EAAQuH,KAAKH,EAAOS,GAI5B,OAHIP,EAAEzK,IAAM,UAAU0B,cACpB+I,EAAIvH,EAAW0D,IAAI6D,EAAGO,IAEpBP,EAAEzK,KAAO,UAAU0B,aAAe+I,EAAExK,IAAM,UAAUyB,YAC/C,UAAUa,MAEZ,IAAI,EAAAR,SAAS,UAAMkJ,MAAMR,EAAEzK,IAAK,UAAMkL,MAAMT,EAAExK,IACvD,EAeA,gBAAqBgB,GACnB,GAAI+B,EAAM4C,QAAQ3E,IAAMA,EAAEhB,IAAM,GAAKgB,EAAEjB,GAAK,EAC1C,OAAO,UAAUyC,MAEnB,MAAMzC,EAAKiB,EAAEjB,KAAO,GAAK,UAAU2B,aAAe,UAAMwJ,OAAOlK,EAAEjB,IAC3DC,EAAKgB,EAAEhB,IAAM,EAAI,UAAU0B,aAAe,UAAMyJ,OAAOnK,EAAEhB,IAC/D,OAAO,IAAI,EAAA8B,SAAS/B,EAAIC,EAC1B,EAeA,gBAAqBgB,GACnB,GAAI+B,EAAM4C,QAAQ3E,IAAMA,EAAEhB,IAAM,GAAKgB,EAAEjB,GAAK,EAC1C,OAAO,UAAUyC,MAEnB,MAAMzC,EAAKiB,EAAEhB,IAAM,EAAI,EAAI,UAAMoL,OAAOpK,EAAEhB,IACpCA,EAAKgB,EAAEjB,KAAO,EAAI,UAAUyB,QAAU,UAAM6J,OAAOrK,EAAEjB,IAC3D,OAAO,IAAI,EAAA+B,SAAS/B,EAAIC,EAC1B,EAeA,gBAAqBgB,GACnB,OAAI+B,EAAM4C,QAAQ3E,GACT,UAAUwB,MAEZ,IAAI,EAAAV,SAAS,UAAMwJ,OAAOtK,EAAEjB,IAAK,UAAMwL,OAAOvK,EAAEhB,IACzD,EAeA,gBAAqBgB,GACnB,OAAI+B,EAAM4C,QAAQ3E,GACT,UAAUwB,MAEZ,IAAI,EAAAV,SAAS,UAAM0J,OAAOxK,EAAEjB,IAAK,UAAM0L,OAAOzK,EAAEhB,IACzD,EAeA,gBAAqBgB,GACnB,OAAI+B,EAAM4C,QAAQ3E,GACT,UAAUwB,MAEfxB,EAAEhB,GAAK,EACF,IAAI,EAAA8B,SAAS,UAAM4J,OAAO1K,EAAEhB,IAAK,UAAM2L,OAAO3K,EAAEjB,KAC9CiB,EAAEjB,IAAM,EACV,IAAI,EAAA+B,SAAS,UAAM4J,OAAO1K,EAAEjB,IAAK,UAAM4L,OAAO3K,EAAEhB,KAEhD,IAAI,EAAA8B,SAAS,EAAG,UAAM6J,QAAQ3K,EAAEjB,GAAKiB,EAAEhB,GAAKgB,EAAEjB,GAAKiB,EAAEhB,IAEhE,EAeA,gBAAqBgB,GACnB,OAAI+B,EAAM4C,QAAQ3E,GACT,UAAUwB,MAEZ,IAAI,EAAAV,SAAS,UAAM8J,OAAO5K,EAAEjB,IAAK,UAAM8L,OAAO7K,EAAEhB,IACzD,C,2BChTA,SAAgB2F,EAAQmG,GACtB,OAAOA,EAAE/L,GAAK+L,EAAE9L,EAClB,CA6EA,SAAgB+L,EAASD,EAAaE,GACpC,OAAIrG,EAAQmG,IAGLA,EAAE/L,IAAMiM,GAASA,GAASF,EAAE9L,EACrC,C,4JA5GA,sBAA2BgB,GACzB,MAAoB,iBAANA,GAAkC,iBAATA,EAAEjB,IAAmC,iBAATiB,EAAEhB,EACvE,EAsBA,YAkBA,mBAAwB8L,GACtB,OAAOA,EAAE/L,MAAO,KAAa+L,EAAE9L,KAAOiJ,GACxC,EAmBA,uBAA4B6C,GAC1B,OAAOA,EAAE/L,KAAO+L,EAAE9L,EACpB,EAeA,kBAAuB8L,GACrB,OAAOC,EAASD,EAAG,EACrB,EAqBA,aA0BA,uBAA4B9K,EAAaC,GACvC,QAAI0E,EAAQ3E,KAGJ2E,EAAQ1E,IAAMA,EAAElB,IAAMiB,EAAEjB,IAAMiB,EAAEhB,IAAMiB,EAAEjB,EAClD,EA6BA,4BAAiCgB,EAAaC,GAC5C,OAAI0E,EAAQ3E,KAAM2E,EAAQ1E,KAGlBD,EAAEjB,IAAMkB,EAAElB,IAAMkB,EAAElB,IAAMiB,EAAEhB,IAAQiB,EAAElB,IAAMiB,EAAEjB,IAAMiB,EAAEjB,IAAMkB,EAAEjB,GACtE,C,uKClMA,kBAMA,SAASiM,EAASlI,GAChB,OAAOA,CACT,CACA,SAAShC,EAAKgC,GACZ,OAAIA,IAAMkF,IACDlF,GAEF,aAAUA,GAAG,IACtB,CACA,SAAS/B,EAAK+B,GACZ,OAAIA,KAAM,IACDA,GAEF,aAAUA,EAAGkF,IACtB,CACA,SAASiD,EAAUlL,GACjB,OAAOA,EAAI,EAAIH,KAAK4F,KAAKzF,GAAKH,KAAK6F,MAAM1F,EAC3C,CAEA,MAAMsJ,EAAQ,CACZvI,KAAMA,EACNC,KAAMA,GAMFU,EAAQ,CAWZ8B,SAAUzC,EAWVwC,SAAUvC,EACVD,KAAKf,GACIsJ,EAAMvI,KAAKf,GAEpBgB,KAAKhB,GACIsJ,EAAMtI,KAAKhB,GAIpB+G,MAAK,CAAE/G,EAAWC,IAA4ByB,EAAMX,KAAKf,EAAIC,GAE7D+G,MAAK,CAAEhH,EAAWC,IAA4ByB,EAAMV,KAAKhB,EAAIC,GAG7D+F,MAAK,CAAEhG,EAAWC,IAA4ByB,EAAMX,KAAKf,EAAIC,GAE7DgG,MAAK,CAAEjG,EAAWC,IAA4ByB,EAAMV,KAAKhB,EAAIC,GAG7DsG,MAAK,CAAEvG,EAAWC,IAA4ByB,EAAMX,KAAKf,EAAIC,GAE7DuG,MAAK,CAAExG,EAAWC,IAA4ByB,EAAMV,KAAKhB,EAAIC,GAG7D6E,MAAK,CAAE9E,EAAWC,IAA4ByB,EAAMX,KAAKf,EAAIC,GAE7D4E,MAAK,CAAE7E,EAAWC,IAA4ByB,EAAMV,KAAKhB,EAAIC,GAG7DkL,MAAOnL,GAA4BkL,EAAUxJ,EAAMX,KAAKf,IAExDoL,MAAOpL,GAA4BkL,EAAUxJ,EAAMV,KAAKhB,IAGxDmH,MAAOnH,GAA4B0B,EAAMX,KAAKlB,KAAK2C,IAAIxC,IAEvDoH,MAAOpH,GAA4B0B,EAAMV,KAAKnB,KAAK2C,IAAIxC,IAGvDuH,MAAOvH,GAA4B0B,EAAMX,KAAKlB,KAAKyH,IAAItH,IAEvDwH,MAAOxH,GAA4B0B,EAAMV,KAAKnB,KAAKyH,IAAItH,IAGvDqL,MAAOrL,GAA4B0B,EAAMX,KAAKlB,KAAKyL,IAAItL,IAEvDuL,MAAOvL,GAA4B0B,EAAMV,KAAKnB,KAAKyL,IAAItL,IAGvD4J,MAAO5J,GAA4B0B,EAAMX,KAAKlB,KAAKwJ,IAAIrJ,IAEvD8J,MAAO9J,GAA4B0B,EAAMV,KAAKnB,KAAKwJ,IAAIrJ,IAGvDgK,MAAOhK,GAA4B0B,EAAMX,KAAKlB,KAAK2L,IAAIxL,IAEvDiK,MAAOjK,GAA4B0B,EAAMV,KAAKnB,KAAK2L,IAAIxL,IAGvDkK,OAAQlK,GAA4B0B,EAAMX,KAAKlB,KAAK4L,KAAKzL,IAEzDmK,OAAQnK,GAA4B0B,EAAMV,KAAKnB,KAAK4L,KAAKzL,IAGzDoK,OAAQpK,GAA4B0B,EAAMX,KAAKlB,KAAK6L,KAAK1L,IAEzDqK,OAAQrK,GAA4B0B,EAAMV,KAAKnB,KAAK6L,KAAK1L,IAGzDsK,OAAQtK,GAA4B0B,EAAMX,KAAKlB,KAAK8L,KAAK3L,IAEzDuK,OAAQvK,GAA4B0B,EAAMV,KAAKnB,KAAK8L,KAAK3L,IAIzDwK,OAAQxK,GAA4B0B,EAAMX,KAAMlB,KAAa+L,KAAK5L,IAElEyK,OAAQzK,GAA4B0B,EAAMV,KAAMnB,KAAa+L,KAAK5L,IAGlE0K,OAAQ1K,GAA4B0B,EAAMX,KAAMlB,KAAagM,KAAK7L,IAElE2K,OAAQ3K,GAA4B0B,EAAMV,KAAMnB,KAAagM,KAAK7L,IAGlE4K,OAAQ5K,GAA4B0B,EAAMX,KAAMlB,KAAaiM,KAAK9L,IAElE6K,OAAQ7K,GAA4B0B,EAAMV,KAAMnB,KAAaiM,KAAK9L,IASlEqF,MAAMrF,EAAWgF,GACf,GAAIA,EAAQ,GAAM,EAEhB,OAAOtD,EAAMX,KAAKlB,KAAKC,IAAIE,EAAGgF,IAGhC,IAAI/E,EAAoB,IAAP,EAAR+E,GAAmBhF,EAAI,EAEhC,IADAgF,IAAU,EACHA,EAAQ,GACbhF,EAAI0B,EAAM6E,MAAMvG,EAAGA,GACC,IAAP,EAARgF,KACH/E,EAAIyB,EAAM6E,MAAMvG,EAAGC,IAErB+E,IAAU,EAEZ,OAAO/E,CACT,EASAkF,MAAMnF,EAAWgF,GACf,GAAIA,EAAQ,GAAM,EAEhB,OAAOtD,EAAMV,KAAKnB,KAAKC,IAAIE,EAAGgF,IAGhC,IAAI/E,EAAoB,IAAP,EAAR+E,GAAmBhF,EAAI,EAEhC,IADAgF,IAAU,EACHA,EAAQ,GACbhF,EAAI0B,EAAM8E,MAAMxG,EAAGA,GACC,IAAP,EAARgF,KACH/E,EAAIyB,EAAM8E,MAAMxG,EAAGC,IAErB+E,IAAU,EAEZ,OAAO/E,CACT,EAGA8L,OAAO/L,GAAoB0B,EAAMX,KAAKlB,KAAKmM,KAAKhM,IAEhDiM,OAAOjM,GAAoB0B,EAAMV,KAAKnB,KAAKmM,KAAKhM,IAwBhDkM,UACE5C,EAAMtI,KAAOsI,EAAMvI,KAAOkK,CAC5B,EA4BAkB,SACE7C,EAAMtI,KAAOA,EACbsI,EAAMvI,KAAOA,CACf,GAGF,UAAeW,C,GChQX0K,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAarO,QAGrB,IAAIC,EAASiO,EAAyBE,GAAY,CAGjDpO,QAAS,CAAC,GAOX,OAHAuO,EAAoBH,GAAUI,KAAKvO,EAAOD,QAASC,EAAQA,EAAOD,QAASmO,GAGpElO,EAAOD,OACf,CCnB0BmO,CAAoB,K,MDF1CD,C","sources":["webpack://Interval/webpack/universalModuleDefinition","webpack://Interval/./node_modules/double-bits/double.js","webpack://Interval/./node_modules/nextafter/nextafter.js","webpack://Interval/./src/constants.ts","webpack://Interval/./src/index.ts","webpack://Interval/./src/interval.ts","webpack://Interval/./src/operations/algebra.ts","webpack://Interval/./src/operations/arithmetic.ts","webpack://Interval/./src/operations/division.ts","webpack://Interval/./src/operations/misc.ts","webpack://Interval/./src/operations/relational.ts","webpack://Interval/./src/operations/trigonometric.ts","webpack://Interval/./src/operations/utils.ts","webpack://Interval/./src/round.ts","webpack://Interval/webpack/bootstrap","webpack://Interval/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Interval\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Interval\"] = factory();\n\telse\n\t\troot[\"Interval\"] = factory();\n})(self, () => {\nreturn ","var hasTypedArrays = false\nif(typeof Float64Array !== \"undefined\") {\n  var DOUBLE_VIEW = new Float64Array(1)\n    , UINT_VIEW   = new Uint32Array(DOUBLE_VIEW.buffer)\n  DOUBLE_VIEW[0] = 1.0\n  hasTypedArrays = true\n  if(UINT_VIEW[1] === 0x3ff00000) {\n    //Use little endian\n    module.exports = function doubleBitsLE(n) {\n      DOUBLE_VIEW[0] = n\n      return [ UINT_VIEW[0], UINT_VIEW[1] ]\n    }\n    function toDoubleLE(lo, hi) {\n      UINT_VIEW[0] = lo\n      UINT_VIEW[1] = hi\n      return DOUBLE_VIEW[0]\n    }\n    module.exports.pack = toDoubleLE\n    function lowUintLE(n) {\n      DOUBLE_VIEW[0] = n\n      return UINT_VIEW[0]\n    }\n    module.exports.lo = lowUintLE\n    function highUintLE(n) {\n      DOUBLE_VIEW[0] = n\n      return UINT_VIEW[1]\n    }\n    module.exports.hi = highUintLE\n  } else if(UINT_VIEW[0] === 0x3ff00000) {\n    //Use big endian\n    module.exports = function doubleBitsBE(n) {\n      DOUBLE_VIEW[0] = n\n      return [ UINT_VIEW[1], UINT_VIEW[0] ]\n    }\n    function toDoubleBE(lo, hi) {\n      UINT_VIEW[1] = lo\n      UINT_VIEW[0] = hi\n      return DOUBLE_VIEW[0]\n    }\n    module.exports.pack = toDoubleBE\n    function lowUintBE(n) {\n      DOUBLE_VIEW[0] = n\n      return UINT_VIEW[1]\n    }\n    module.exports.lo = lowUintBE\n    function highUintBE(n) {\n      DOUBLE_VIEW[0] = n\n      return UINT_VIEW[0]\n    }\n    module.exports.hi = highUintBE\n  } else {\n    hasTypedArrays = false\n  }\n}\nif(!hasTypedArrays) {\n  var buffer = new Buffer(8)\n  module.exports = function doubleBits(n) {\n    buffer.writeDoubleLE(n, 0, true)\n    return [ buffer.readUInt32LE(0, true), buffer.readUInt32LE(4, true) ]\n  }\n  function toDouble(lo, hi) {\n    buffer.writeUInt32LE(lo, 0, true)\n    buffer.writeUInt32LE(hi, 4, true)\n    return buffer.readDoubleLE(0, true)\n  }\n  module.exports.pack = toDouble  \n  function lowUint(n) {\n    buffer.writeDoubleLE(n, 0, true)\n    return buffer.readUInt32LE(0, true)\n  }\n  module.exports.lo = lowUint\n  function highUint(n) {\n    buffer.writeDoubleLE(n, 0, true)\n    return buffer.readUInt32LE(4, true)\n  }\n  module.exports.hi = highUint\n}\n\nmodule.exports.sign = function(n) {\n  return module.exports.hi(n) >>> 31\n}\n\nmodule.exports.exponent = function(n) {\n  var b = module.exports.hi(n)\n  return ((b<<1) >>> 21) - 1023\n}\n\nmodule.exports.fraction = function(n) {\n  var lo = module.exports.lo(n)\n  var hi = module.exports.hi(n)\n  var b = hi & ((1<<20) - 1)\n  if(hi & 0x7ff00000) {\n    b += (1<<20)\n  }\n  return [lo, b]\n}\n\nmodule.exports.denormalized = function(n) {\n  var hi = module.exports.hi(n)\n  return !(hi & 0x7ff00000)\n}","\"use strict\"\n\nvar doubleBits = require(\"double-bits\")\n\nvar SMALLEST_DENORM = Math.pow(2, -1074)\nvar UINT_MAX = (-1)>>>0\n\nmodule.exports = nextafter\n\nfunction nextafter(x, y) {\n  if(isNaN(x) || isNaN(y)) {\n    return NaN\n  }\n  if(x === y) {\n    return x\n  }\n  if(x === 0) {\n    if(y < 0) {\n      return -SMALLEST_DENORM\n    } else {\n      return SMALLEST_DENORM\n    }\n  }\n  var hi = doubleBits.hi(x)\n  var lo = doubleBits.lo(x)\n  if((y > x) === (x > 0)) {\n    if(lo === UINT_MAX) {\n      hi += 1\n      lo = 0\n    } else {\n      lo += 1\n    }\n  } else {\n    if(lo === 0) {\n      lo = UINT_MAX\n      hi -= 1\n    } else {\n      lo -= 1\n    }\n  }\n  return doubleBits.pack(lo, hi)\n}","import { Interval } from './interval'\nimport round from './round'\n\nconst piLow = (3373259426.0 + 273688.0 / (1 << 21)) / (1 << 30)\nconst piHigh = (3373259426.0 + 273689.0 / (1 << 21)) / (1 << 30)\n\n/**\n * @mixin constants\n */\nconst constants = {\n  /**\n   * Previous IEEE floating point value of PI (equal to Math.PI)\n   * 3.141592653589793\n   * @memberof constants\n   * @type {number}\n   */\n  PI_LOW: piLow,\n  /**\n   * Next IEEE floating point value of PI, 3.1415926535897936\n   * @memberof constants\n   * @type {number}\n   */\n  PI_HIGH: piHigh,\n  PI_HALF_LOW: piLow / 2,\n  PI_HALF_HIGH: piHigh / 2,\n  PI_TWICE_LOW: piLow * 2,\n  PI_TWICE_HIGH: piHigh * 2,\n\n  /**\n   * An interval that represents PI, NOTE: calls to Interval.PI always return\n   * a new interval representing PI\n   * @memberof constants\n   * @static\n   * @example\n   * ```typescript\n   * Interval.E\n   * ```\n   * @name E\n   * @type {Interval}\n   */\n  get E(): Interval {\n    return new Interval(\n      round.prev(Math.E),\n      round.next(Math.E)\n    )\n  },\n\n  /**\n   * An interval that represents Euler's constant e, NOTE: calls to Interval.E always return\n   * a new interval representing PI\n   * @memberof constants\n   * @static\n   * @example\n   * ```typescript\n   * Interval(Interval.PI_LOW, Interval.PI_HIGH)\n   * ```\n   * @name PI\n   * @type {Interval}\n   */\n  get PI(): Interval {\n    return new Interval(piLow, piHigh)\n  },\n\n  /**\n   * An interval that represents `PI / 2`, NOTE: calls to `Interval.PI_HALF` always\n   * return a new interval representing `PI / 2`\n   * @memberof constants\n   * @static\n   * @example\n   * ```typescript\n   * Interval(Interval.PI_LOW / 2, Interval.PI_HIGH / 2)\n   * ```\n   * @name PI_HALF\n   * @type {Interval}\n   */\n  get PI_HALF(): Interval {\n    return new Interval(constants.PI_HALF_LOW, constants.PI_HALF_HIGH)\n  },\n\n  /**\n   * An interval that represents `PI * 2` NOTE: calls to `Interval.PI_TWICE` always\n   * return a new interval representing `PI * 2`\n   * @memberof constants\n   * @static\n   * @example\n   * ```typescript\n   * Interval(Interval.PI_LOW * 2, Interval.PI_HIGH * 2)\n   * ```\n   * @name PI_TWICE\n   * @type {Interval}\n   */\n  get PI_TWICE(): Interval {\n    return new Interval(constants.PI_TWICE_LOW, constants.PI_TWICE_HIGH)\n  },\n\n  /**\n   * An interval that represents 0, NOTE: calls to `Interval.ZERO` always return a new interval representing 0\n   * @memberof constants\n   * @static\n   * @example\n   * ```typescript\n   * // Interval.ZERO is equivalent to\n   * Interval(0)\n   * ```\n   * @name ZERO\n   * @type {Interval}\n   */\n  get ZERO(): Interval {\n    return new Interval(0)\n  },\n\n  /**\n   * An interval that represents 1, NOTE: calls to Interval.ONE always\n   * return a new interval representing 1\n   * @memberof constants\n   * @static\n   * @example\n   * // Interval.ONE is equivalent to\n   * Interval(1)\n   * @name ONE\n   * @type {Interval}\n   */\n  get ONE(): Interval {\n    return new Interval(1)\n  },\n\n  /**\n   * An interval that represents all the real values\n   * NOTE: calls to Interval.WHOLE always return a new interval representing all the real values\n   * @memberof constants\n   * @static\n   * @example\n   * ```typescript\n   * // Interval.WHOLE is equivalent to\n   * Interval().setWhole()\n   * ```\n   * @name WHOLE\n   * @type {Interval}\n   */\n  get WHOLE(): Interval {\n    return new Interval().setWhole()\n  },\n\n  /**\n   * An interval that represents no values\n   * NOTE: calls to Interval.EMPTY always return a new interval representing no values\n   * @memberof constants\n   * @static\n   * @example\n   * ```typescript\n   * // Interval.EMPTY is equivalent to\n   * Interval().setEmpty()\n   * ```\n   * @name EMPTY\n   * @type {Interval}\n   */\n  get EMPTY(): Interval {\n    return new Interval().setEmpty()\n  }\n}\n\nexport default constants\n","/*\n * interval-arithmetic\n *\n * Copyright (c) 2015-2020 Mauricio Poppe\n * Licensed under the MIT license.\n */\n\nimport { Interval as BindNewInterval, _Interval as Interval } from './interval'\nimport round from './round'\nimport constants from './constants'\n\nimport * as relational from './operations/relational'\nimport * as arithmetic from './operations/arithmetic'\nimport * as algebra from './operations/algebra'\nimport * as trigonometric from './operations/trigonometric'\nimport * as misc from './operations/misc'\nimport * as utils from './operations/utils'\n\nconst MixedInterval = Object.assign(BindNewInterval, constants, round, misc, utils, relational, arithmetic, algebra, trigonometric, { round })\n\nexport default MixedInterval\nexport { Interval }\nexport { round, constants }\nexport * from './operations/relational'\nexport * from './operations/arithmetic'\nexport * from './operations/algebra'\nexport * from './operations/trigonometric'\nexport * from './operations/misc'\nexport * from './operations/utils'\n","import { IInterval } from \"./IInterval\"\nimport * as utils from './operations/utils'\nimport round from './round'\n\n/**\n * Constructor for closed intervals representing all the values inside (and\n * including) `lo` and `hi` e.g. `[lo, hi]`\n *\n * NOTE: If `lo > hi` then the constructor will return an empty interval\n *\n * @mixes arithmetic\n * @mixes algebra\n * @mixes misc\n * @mixes relational\n * @mixes trigonometric\n * @mixes utils\n * @mixes constants\n *\n * @link #bounded\n * @link #boundedSingleton\n *\n * @example\n * ```typescript\n * new Interval(1, 2)  // {lo: 1, hi: 2}\n * // function invocation without new is also supported\n * Interval(1, 2)   // {lo: 1, hi: 2}\n * // with numbers\n * Interval(1, 2)   // {lo: 1, hi: 2}\n * Interval(1)      // {lo: 1, hi: 1}\n * // with an array\n * Interval([1, 2]) // {lo: 1, hi: 2}\n * // singleton intervals\n * var x = Interval(1)\n * var y = Interval(2)\n * Interval(x, y)   // {lo: 1, hi: 2}\n * // when `lo > hi` it returns an empty interval\n * Interval(2, 1)   // {lo: Infinity, hi: -Infinity}\n * // bounded interval\n * Interval().bounded(1, 2)  // { lo: 0.9999999999999999, hi: 2.0000000000000004 }\n * // singleton bounded interval\n * Interval().boundedSingleton(2)  // {lo: 1.9999999999999998, hi: 2.0000000000000004}\n * // half open and open intervals\n * // [2, 3]\n * Interval(2, 3)                     // {lo: 2, hi: 3}\n * // (2, 3]\n * Interval().halfOpenLeft(2, 3)      // {lo: 2.0000000000000004, hi: 3}\n * // [2, 3)\n * Interval().halfOpenRight(2, 3)     // {lo: 2, hi: 2.9999999999999996}\n * // (2, 3)\n * Interval().open(2, 3)              // {lo: 2.0000000000000004, hi: 2.9999999999999996}\n * ```\n *\n * @param {number|array|Interval} lo The left endpoint of the interval if it's a\n * number or a singleton interval, if it's an array then an interval will be\n * built out of the elements of the array\n * @param {number|Interval} [hi] The right endpoint of the interval if it's a\n * number or a singleton interval, if omitted then a singleton interval will be\n * built out of `lo`\n */\nexport class _Interval implements IInterval {\n  /**\n   * The left endpoint of the interval\n   * @type {number}\n   */\n  lo: number = 0\n\n  /**\n   * The right endpoint of the interval\n   * @type {number}\n   */\n  hi: number = 0\n\n  constructor(lo?: Interval | number, hi?: Interval | number) {\n    if (!(this instanceof _Interval)) {\n      console.log('calling with new')\n      console.log(lo, hi)\n      return new _Interval(lo, hi)\n    }\n\n    if (typeof lo !== 'undefined' && typeof hi !== 'undefined') {\n      // possible cases:\n      // - Interval(1, 2)\n      // - Interval(Interval(1, 1), Interval(2, 2))     // singletons are required\n      if (utils.isInterval(lo)) {\n        if (!utils.isSingleton(lo as Interval)) {\n          throw new TypeError('Interval: interval `lo` must be a singleton')\n        }\n        lo = (lo as Interval).lo\n      }\n      if (utils.isInterval(hi)) {\n        if (!utils.isSingleton(hi as Interval)) {\n          throw TypeError('Interval: interval `hi` must be a singleton')\n        }\n        hi = (hi as Interval).hi\n      }\n    } else if (typeof lo !== 'undefined') {\n      // possible cases:\n      // - Interval([1, 2])\n      // - Interval([Interval(1, 1), Interval(2, 2)])\n      if (Array.isArray(lo)) {\n        return new Interval(lo[0], lo[1])\n      }\n      // - Interval(1)\n      return new Interval(lo, lo)\n    } else {\n      // possible cases:\n      // - Interval()\n      lo = hi = 0\n    }\n    this.assign(lo as number, hi as number)\n  }\n\n  /**\n   * Sets `this.lo` and `this.hi` to a single value `v`\n   *\n   * @param {number} v\n   * @return {Interval} The calling interval i.e. `this`\n   */\n  singleton(v: number): Interval {\n    return this.set(v, v)\n  }\n\n  /**\n   * Sets new endpoints to this interval, the left endpoint is equal to the\n   * previous IEEE floating point value of `lo` and the right endpoint\n   * is equal to the next IEEE floating point\n   * value of `hi`, it's assumed that `lo <= hi`\n   *\n   * @example\n   * ```typescript\n   * const x = Interval().bounded(1, 2)\n   * x.lo < 1 // true, x.lo === 0.9999999999999999\n   * x.hi > 2 // true, x.hi === 2.0000000000000004\n   * ```\n   *\n   * @example\n   * ```typescript\n   * // the correct representation of 1/3\n   * var x = Interval().bounded(1/3, 1/3)\n   * x.lo < 1/3 // true\n   * x.hi > 1/3 // true\n   * // however the floating point representation of 1/3 is less than the real 1/3\n   * // therefore the left endpoint could be 1/3 instead of the previous value of\n   * var next = Interval.round.safeNext\n   * var x = Interval().set(1/3, next(1/3))\n   * // x now represents 1/3 correctly\n   * ```\n   *\n   * @param {number} lo\n   * @param {number} hi\n   * @return {Interval} The calling interval i.e. `this`\n   */\n  bounded(lo: number, hi: number): Interval {\n    return this.set(round.prev(lo), round.next(hi))\n  }\n\n  /**\n   * Equivalent to `Interval().bounded(v, v)`\n   * @param {number} v\n   * @return {Interval} The calling interval i.e. `this`\n   */\n  boundedSingleton(v: number): Interval {\n    return this.bounded(v, v)\n  }\n\n  /**\n   * Sets new endpoints for this interval, this method bypasses any\n   * checks on the type of arguments\n   *\n   * @param {Number} lo The left endpoint of the interval\n   * @param {Number} hi The right endpoint of the interval\n   * @return {Interval} The calling interval\n   */\n  set(lo: number, hi: number): Interval {\n    this.lo = lo\n    this.hi = hi\n    return this\n  }\n\n  /**\n   * Sets new endpoints for this interval checking that both arguments exist\n   * and that are valid numbers, additionally if `lo > hi` the interval is set to\n   * an empty interval\n   *\n   * @param {Number} lo The left endpoint of the interval\n   * @param {Number} hi The right endpoint of the interval\n   * @return {Interval} The calling interval\n   */\n  assign(lo: number, hi: number): Interval {\n    if (typeof lo !== 'number' || typeof hi !== 'number') {\n      throw TypeError('Interval#assign: arguments must be numbers')\n    }\n    if (isNaN(lo) || isNaN(hi) || lo > hi) {\n      return this.setEmpty()\n    }\n    return this.set(lo, hi)\n  }\n\n  /**\n   * Sets the endpoints of this interval to `[∞, -∞]` effectively representing\n   * no values\n   * @return {Interval} The calling interval\n   */\n  setEmpty(): Interval {\n    return this.set(Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY)\n  }\n\n  /**\n   * Sets the endpoints of this interval to `[-∞, ∞]` effectively representing all\n   * the possible real values\n   * @return {Interval} The calling interval\n   */\n  setWhole(): Interval {\n    return this.set(Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY)\n  }\n\n  /**\n   * Sets the endpoints of this interval to the open interval `(lo, hi)`\n   *\n   * NOTE: `Interval.round.disable` has no effect on this method\n   *\n   * @example\n   * ```typescript\n   * // (2, 3)\n   * Interval().open(2, 3)  // {lo: 2.0000000000000004, hi: 2.9999999999999996}\n   * ```\n   *\n   * @param {number} lo\n   * @param {number} hi\n   * @return {Interval} The calling interval\n   */\n  open(lo: number, hi: number): Interval {\n    return this.assign(round.safeNext(lo), round.safePrev(hi))\n  }\n\n  /**\n   * Sets the endpoints of this interval to the half open interval `(lo, hi]`\n   *\n   * NOTE: `Interval.round.disable` has no effect on this method\n   *\n   * @example\n   * ```typescript\n   * // (2, 3]\n   * Interval().halfOpenLeft(2, 3)  // {lo: 2.0000000000000004, hi: 3}\n   * ```\n   *\n   * @param {number} lo\n   * @param {number} hi\n   * @return {Interval} The calling interval\n   */\n  halfOpenLeft(lo: number, hi: number): Interval {\n    return this.assign(round.safeNext(lo), hi)\n  }\n\n  /**\n   * Sets the endpoints of this interval to the half open interval `[lo, hi)`\n   *\n   * NOTE: `Interval.round.disable` has no effect on this method\n   *\n   * @example\n   * ```typescript\n   * // [2, 3)\n   * Interval.halfOpenRight(2, 3)     // {lo: 2, hi: 2.9999999999999996}\n   * ```\n   *\n   * @param {number} lo\n   * @param {number} hi\n   * @return {Interval} The calling interval\n   */\n  halfOpenRight(lo: number, hi: number): Interval {\n    return this.assign(lo, round.safePrev(hi))\n  }\n\n  /**\n   * Array representation of this interval\n   * @return {array}\n   */\n  toArray(): number[] {\n    return [this.lo, this.hi]\n  }\n\n  /**\n   * Creates an interval equal to the calling one\n   * @see Interval.clone\n   * @name Interval.prototype\n   * @example\n   * ```typescript\n   * var x = Interval(2, 3)\n   * x.clone()    // Interval(2, 3)\n   * ```\n   * @return {Interval}\n   */\n  clone(): Interval {\n    return new Interval().set(this.lo, this.hi)\n  }\n}\n\nfunction bindNew<C extends { new(): T }, T>(Class: C & {new (): T}): C & (() => T);\n// @ts-ignore\nfunction bindNew(Class) {\n  function _Class() {\n    for (\n      var len = arguments.length, rest = Array(len), key = 0;\n      key < len;\n      key++\n    ) {\n      rest[key] = arguments[key];\n    }\n\n    // @ts-ignore\n    return new (Function.prototype.bind.apply(Class, [null].concat(rest)))();\n  }\n  _Class.prototype = Class.prototype;\n  return _Class;\n}\n\n// class callable without new\n// https://stackoverflow.com/questions/32807163/call-constructor-on-typescript-class-without-new\ntype Interval = _Interval\nconst Interval = bindNew(_Interval)\n\n// @ts-ignore\nInterval.factory = Interval\n\nexport { Interval }\n","import { Interval } from '../interval'\nimport rmath from '../round'\nimport constants from '../constants'\n\nimport * as utils from './utils'\nimport * as arithmetic from './arithmetic'\n\n/**\n * @mixin algebra\n */\n\n/**\n * Computes `x mod y (x - k * y)`\n *\n * @example\n * ```typescript\n * Interval.fmod(\n *   Interval(5.3, 5.3),\n *   Interval(2, 2)\n * ) // Interval(1.3, 1.3)\n * Interval.fmod(\n *   Interval(5, 7),\n *   Interval(2, 3)\n * ) // Interval(2, 5)\n * // explanation: [5, 7] - [2, 3] * 1 = [2, 5]\n * ```\n *\n * @param {Interval} x\n * @param {Interval} y\n * @return {Interval}\n */\nexport function fmod(x: Interval, y: Interval): Interval {\n  if (utils.isEmpty(x) || utils.isEmpty(y)) {\n    return constants.EMPTY\n  }\n  const yb = x.lo < 0 ? y.lo : y.hi\n  let n = x.lo / yb\n  if (n < 0) n = Math.ceil(n)\n  else n = Math.floor(n)\n  // x mod y = x - n * y\n  return arithmetic.sub(x, arithmetic.mul(y, new Interval(n)))\n}\n\n/**\n * Computes `1 / x`\n *\n * @example\n * ```typescript\n * Interval.multiplicativeInverse(\n *   Interval(2, 6)\n * )  // Interval(1/6, 1/2)\n * Interval.multiplicativeInverse(\n *   Interval(-6, -2)\n * )  // Interval(-1/2, -1/6)\n * ```\n *\n * @param {Interval} x\n * @returns {Interval}\n */\nexport function multiplicativeInverse(x: Interval): Interval {\n  if (utils.isEmpty(x)) {\n    return constants.EMPTY\n  }\n  if (utils.zeroIn(x)) {\n    if (x.lo !== 0) {\n      if (x.hi !== 0) {\n        // [negative, positive]\n        return constants.WHOLE\n      } else {\n        // [negative, zero]\n        return new Interval(Number.NEGATIVE_INFINITY, rmath.divHi(1, x.lo))\n      }\n    } else {\n      if (x.hi !== 0) {\n        // [zero, positive]\n        return new Interval(rmath.divLo(1, x.hi), Number.POSITIVE_INFINITY)\n      } else {\n        // [zero, zero]\n        return constants.EMPTY\n      }\n    }\n  } else {\n    // [positive, positive]\n    return new Interval(rmath.divLo(1, x.hi), rmath.divHi(1, x.lo))\n  }\n}\n\n/**\n * Computes `x^power` given that `power` is an integer\n *\n * If `power` is an Interval it must be a singletonInterval i.e. `x^x` is not\n * supported yet\n *\n * If `power` is a rational number use {@link nthRoot} instead\n *\n * @example\n * ```typescript\n * // 2^{-2}\n * Interval.pow(\n *   Interval(2, 2),\n *   -2\n * )  // Interval(1/4, 1/4)\n * // [2,3]^2\n * Interval.pow(\n *   Interval(2, 3),\n *   2\n * )  // Interval(4, 9)\n * // [2,3]^0\n * Interval.pow(\n *   Interval(2, 3),\n *   0\n * )  // Interval(1, 1)\n * // with a singleton interval\n * Interval.pow(\n *   Interval(2, 3),\n *   Interval(2)\n * )  // Interval(4, 9)\n * ```\n *\n * @param {Interval} x\n * @param {number|Interval} power A number of a singleton interval\n * @returns {Interval}\n */\nexport function pow(x: Interval, power: Interval | number): Interval {\n  if (utils.isEmpty(x)) {\n    return constants.EMPTY\n  }\n  if (typeof power === 'object') {\n    if (!utils.isSingleton(power)) {\n      return constants.EMPTY\n    }\n    power = power.lo\n  }\n\n  if (power === 0) {\n    if (x.lo === 0 && x.hi === 0) {\n      // 0^0\n      return constants.EMPTY\n    } else {\n      // x^0\n      return constants.ONE\n    }\n  } else if (power < 0) {\n    // compute [1 / x]^-power if power is negative\n    return pow(multiplicativeInverse(x), -power)\n  }\n\n  // power > 0\n  if (Number.isSafeInteger(power) as boolean) {\n    // power is integer\n    if (x.hi < 0) {\n      // [negative, negative]\n      // assume that power is even so the operation will yield a positive interval\n      // if not then just switch the sign and order of the interval bounds\n      const yl = rmath.powLo(-x.hi, power)\n      const yh = rmath.powHi(-x.lo, power)\n      if ((power & 1) === 1) {\n        // odd power\n        return new Interval(-yh, -yl)\n      } else {\n        // even power\n        return new Interval(yl, yh)\n      }\n    } else if (x.lo < 0) {\n      // [negative, positive]\n      if ((power & 1) === 1) {\n        return new Interval(-rmath.powLo(-x.lo, power), rmath.powHi(x.hi, power))\n      } else {\n        // even power means that any negative number will be zero (min value = 0)\n        // and the max value will be the max of x.lo^power, x.hi^power\n        return new Interval(0, rmath.powHi(Math.max(-x.lo, x.hi), power))\n      }\n    } else {\n      // [positive, positive]\n      return new Interval(rmath.powLo(x.lo, power), rmath.powHi(x.hi, power))\n    }\n  } else {\n    console.warn('power is not an integer, you should use nth-root instead, returning an empty interval')\n    return constants.EMPTY\n  }\n}\n\n/**\n * Computes `sqrt(x)`, alias for `nthRoot(x, 2)`\n *\n * @example\n * ```typescript\n * Interval.sqrt(\n *   Interval(4, 9)\n * ) // Interval(prev(2), next(3))\n * ```\n *\n * @param {Interval} x\n * @returns {Interval}\n */\nexport function sqrt(x: Interval): Interval {\n  return nthRoot(x, 2)\n}\n\n/**\n * Computes `x^(1/n)`\n *\n * @example\n * ```typescript\n * Interval.nthRoot(\n *   Interval(-27, -8),\n *   3\n * ) // Interval(-3, -2)\n * ```\n *\n * @param {Interval} x\n * @param {number|Interval} n A number or a singleton interval\n * @return {Interval}\n */\nexport function nthRoot(x: Interval, n: Interval | number): Interval {\n  if (utils.isEmpty(x) || n < 0) {\n    // compute 1 / x^-power if power is negative\n    return constants.EMPTY\n  }\n\n  // singleton interval check\n  if (typeof n === 'object') {\n    if (!utils.isSingleton(n)) {\n      return constants.EMPTY\n    }\n    n = n.lo\n  }\n\n  const power = 1 / n\n  if (x.hi < 0) {\n    // [negative, negative]\n    if ((Number.isSafeInteger(n) as boolean) && (n & 1) === 1) {\n      // when n is odd we can always take the nth root\n      const yl = rmath.powHi(-x.lo, power)\n      const yh = rmath.powLo(-x.hi, power)\n      return new Interval(-yl, -yh)\n    }\n    // n is not odd therefore there's no nth root\n    return constants.EMPTY\n  } else if (x.lo < 0) {\n    // [negative, positive]\n    const yp = rmath.powHi(x.hi, power)\n    if ((Number.isSafeInteger(n) as boolean) && (n & 1) === 1) {\n      // nth root of x.lo is possible (n is odd)\n      const yn = -rmath.powHi(-x.lo, power)\n      return new Interval(yn, yp)\n    }\n    return new Interval(0, yp)\n  } else {\n    // [positive, positive]\n    return new Interval(rmath.powLo(x.lo, power), rmath.powHi(x.hi, power))\n  }\n}\n","import { Interval } from '../interval'\nimport rmath from '../round'\nimport constants from '../constants'\nimport * as utils from './utils'\nimport * as division from './division'\n\n/**\n * @mixin arithmetic\n */\n\n/**\n * Adds two intervals\n *\n * @example\n * ```typescript\n * Interval.add(\n *   Interval(0, 1),\n *   Interval(1, 2),\n * )   // Interval(prev(1), next(3))\n * ```\n *\n * @param {Interval} x\n * @param {Interval} y\n * @return {Interval}\n */\nexport function add(x: Interval, y: Interval): Interval {\n  return new Interval(rmath.addLo(x.lo, y.lo), rmath.addHi(x.hi, y.hi))\n}\n\n/**\n * Subtracts two intervals\n *\n * @example\n * ```typescript\n * Interval.subtract(\n *   Interval(0, 1),\n *   Interval(1, 2),\n * )   // Interval(prev(-2), next(0))\n * ```\n *\n * @param {Interval} x\n * @param {Interval} y\n * @return {Interval}\n */\nexport function subtract(x: Interval, y: Interval): Interval {\n  return new Interval(rmath.subLo(x.lo, y.hi), rmath.subHi(x.hi, y.lo))\n}\n\n/**\n * Alias for {@link subtract}\n * @function\n */\nexport const sub = subtract\n\n/**\n * Multiplies two intervals, an explanation of all the possible cases ca\n * be found on [Interval Arithmetic: from Principles to Implementation - T. Hickey, Q. Ju, M.H. van Emden](http://fab.cba.mit.edu/classes/S62.12/docs/Hickey_interval.pdf)\n *\n * @example\n * ```typescript\n * Interval.multiply(\n *  Interval(1, 2),\n *  Interval(2, 3)\n * ) // Interval(prev(2), next(6))\n * ```\n *\n * @example\n * ```typescript\n * Interval.multiply(\n *  Interval(1, Infinity),\n *  Interval(4, 6)\n * ) // Interval(prev(4), Infinity)\n * ```\n *\n * @example\n * ```typescript\n * Interval.multiply(\n *  Interval(1, 2),\n *  Interval(-3, -2)\n * ) // Interval(prev(-6), next(-2))\n * ```\n *\n * @example\n * ```typescript\n * Interval.multiply(\n *  Interval(1, 2),\n *  Interval(-2, 3)\n * ) // Interval(prev(-4), next(6))\n * ```\n *\n * @example\n * ```typescript\n * Interval.multiply(\n *  Interval(-2, -1),\n *  Interval(-3, -2)\n * ) // Interval(prev(2), next(6))\n * ```\n *\n * @param {Interval} x\n * @param {Interval} y\n * @return {Interval}\n */\nexport function multiply(x: Interval, y: Interval): Interval {\n  if (utils.isEmpty(x) || utils.isEmpty(y)) {\n    return constants.EMPTY\n  }\n  const xl = x.lo\n  const xh = x.hi\n  const yl = y.lo\n  const yh = y.hi\n  const out = new Interval()\n  if (xl < 0) {\n    if (xh > 0) {\n      if (yl < 0) {\n        if (yh > 0) {\n          // mixed * mixed\n          out.lo = Math.min(rmath.mulLo(xl, yh), rmath.mulLo(xh, yl))\n          out.hi = Math.max(rmath.mulHi(xl, yl), rmath.mulHi(xh, yh))\n        } else {\n          // mixed * negative\n          out.lo = rmath.mulLo(xh, yl)\n          out.hi = rmath.mulHi(xl, yl)\n        }\n      } else {\n        if (yh > 0) {\n          // mixed * positive\n          out.lo = rmath.mulLo(xl, yh)\n          out.hi = rmath.mulHi(xh, yh)\n        } else {\n          // mixed * zero\n          out.lo = 0\n          out.hi = 0\n        }\n      }\n    } else {\n      if (yl < 0) {\n        if (yh > 0) {\n          // negative * mixed\n          out.lo = rmath.mulLo(xl, yh)\n          out.hi = rmath.mulHi(xl, yl)\n        } else {\n          // negative * negative\n          out.lo = rmath.mulLo(xh, yh)\n          out.hi = rmath.mulHi(xl, yl)\n        }\n      } else {\n        if (yh > 0) {\n          // negative * positive\n          out.lo = rmath.mulLo(xl, yh)\n          out.hi = rmath.mulHi(xh, yl)\n        } else {\n          // negative * zero\n          out.lo = 0\n          out.hi = 0\n        }\n      }\n    }\n  } else {\n    if (xh > 0) {\n      if (yl < 0) {\n        if (yh > 0) {\n          // positive * mixed\n          out.lo = rmath.mulLo(xh, yl)\n          out.hi = rmath.mulHi(xh, yh)\n        } else {\n          // positive * negative\n          out.lo = rmath.mulLo(xh, yl)\n          out.hi = rmath.mulHi(xl, yh)\n        }\n      } else {\n        if (yh > 0) {\n          // positive * positive\n          out.lo = rmath.mulLo(xl, yl)\n          out.hi = rmath.mulHi(xh, yh)\n        } else {\n          // positive * zero\n          out.lo = 0\n          out.hi = 0\n        }\n      }\n    } else {\n      // zero * any other value\n      out.lo = 0\n      out.hi = 0\n    }\n  }\n  return out\n}\n\n/**\n * Alias for {@link multiply}\n * @function\n */\nexport const mul = multiply\n\n/**\n * Computes x/y, an explanation of all the possible cases ca\n * be found on [Interval Arithmetic: from Principles to Implementation - T. Hickey, Q. Ju, M.H. van Emden](http://fab.cba.mit.edu/classes/S62.12/docs/Hickey_interval.pdf)\n *\n * NOTE: an extreme case of division might results in multiple\n * intervals, unfortunately this library doesn't support multi-interval\n * arithmetic yet so a single interval will be returned instead with\n * the {@link hull} of the resulting intervals (this is the way\n * Boost implements it too)\n *\n * @example\n * ```typescript\n * Interval.divide(\n *   Interval(1, 2),\n *   Interval(3, 4)\n * ) // Interval(prev(1/4), next(2/3))\n * ```\n *\n * @example\n * ```typescript\n * Interval.divide(\n *   Interval(-2, 1),\n *   Interval(-4, -3)\n * ) // Interval(prev(-1/3), next(2/3))\n * ```\n *\n * @example\n * ```typescript\n * Interval.divide(\n *   Interval(1, 2),\n *   Interval(-1, 1)\n * ) // Interval(-Infinity, Infinity)\n * ```\n *\n * @param {Interval} x\n * @param {Interval} y\n * @return {Interval}\n */\nexport function divide(x: Interval, y: Interval): Interval {\n  if (utils.isEmpty(x) || utils.isEmpty(y)) {\n    return constants.EMPTY\n  }\n  if (utils.zeroIn(y)) {\n    if (y.lo !== 0) {\n      if (y.hi !== 0) {\n        return division.zero(x)\n      } else {\n        return division.negative(x, y.lo)\n      }\n    } else {\n      if (y.hi !== 0) {\n        return division.positive(x, y.hi)\n      } else {\n        return constants.EMPTY\n      }\n    }\n  } else {\n    return division.nonZero(x, y)\n  }\n}\n\n/**\n * Alias for {@link divide}\n * @function\n */\nexport const div = divide\n\n/**\n * Computes +x (identity function)\n * @link clone\n *\n * @example\n * ```typescript\n * Interval.positive(\n *  Interval(1, 2)\n * )  // Interval(1, 2)\n * ```\n *\n * @param {Interval} x\n * @return {Interval}\n */\nexport function positive(x: Interval): Interval {\n  return new Interval(x.lo, x.hi)\n}\n\n/**\n * Computes -x\n *\n * @example\n * ```typescript\n * Interval.negative(\n *   Interval(1, 2)\n * )  // Interval(-2, -1)\n * ```\n *\n * @example\n * ```typescript\n * Interval.negative(\n *   Interval(-Infinity, Infinity)\n * )  // Interval(-Infinity, Infinity)\n * ```\n *\n * @example\n * ```typescript\n * Interval.negative(\n *   Interval.WHOLE\n * )  // Interval.WHOLE\n * ```\n *\n * @param {Interval} x\n * @return {Interval}\n */\nexport function negative(x: Interval): Interval {\n  return new Interval(-x.hi, -x.lo)\n}\n","import { Interval } from '../interval'\nimport rmath from '../round'\nimport * as utils from './utils'\nimport constants from '../constants'\n\n/**\n * Division between intervals when `y` doesn't contain zero\n * @param {Interval} x\n * @param {Interval} y\n * @returns {Interval}\n */\nexport function nonZero(x: Interval, y: Interval): Interval {\n  const xl = x.lo\n  const xh = x.hi\n  const yl = y.lo\n  const yh = y.hi\n  const out = new Interval()\n  if (xh < 0) {\n    if (yh < 0) {\n      out.lo = rmath.divLo(xh, yl)\n      out.hi = rmath.divHi(xl, yh)\n    } else {\n      out.lo = rmath.divLo(xl, yl)\n      out.hi = rmath.divHi(xh, yh)\n    }\n  } else if (xl < 0) {\n    if (yh < 0) {\n      out.lo = rmath.divLo(xh, yh)\n      out.hi = rmath.divHi(xl, yh)\n    } else {\n      out.lo = rmath.divLo(xl, yl)\n      out.hi = rmath.divHi(xh, yl)\n    }\n  } else {\n    if (yh < 0) {\n      out.lo = rmath.divLo(xh, yh)\n      out.hi = rmath.divHi(xl, yl)\n    } else {\n      out.lo = rmath.divLo(xl, yh)\n      out.hi = rmath.divHi(xh, yl)\n    }\n  }\n  return out\n}\n\n/**\n * Division between an interval and a positive constant\n * @param {Interval} x\n * @param {number} v\n * @returns {Interval}\n */\nexport function positive(x: Interval, v: number): Interval {\n  if (x.lo === 0 && x.hi === 0) {\n    return x\n  }\n\n  if (utils.zeroIn(x)) {\n    // mixed considering zero in both ends\n    return constants.WHOLE\n  }\n\n  if (x.hi < 0) {\n    // negative / v\n    return new Interval(Number.NEGATIVE_INFINITY, rmath.divHi(x.hi, v))\n  } else {\n    // positive / v\n    return new Interval(rmath.divLo(x.lo, v), Number.POSITIVE_INFINITY)\n  }\n}\n\n/**\n * Division between an interval and a negative constant\n * @param {Interval} x\n * @param {number} v\n * @returns {Interval}\n */\nexport function negative(x: Interval, v: number): Interval {\n  if (x.lo === 0 && x.hi === 0) {\n    return x\n  }\n\n  if (utils.zeroIn(x)) {\n    // mixed considering zero in both ends\n    return constants.WHOLE\n  }\n\n  if (x.hi < 0) {\n    // negative / v\n    return new Interval(rmath.divLo(x.hi, v), Number.POSITIVE_INFINITY)\n  } else {\n    // positive / v\n    return new Interval(Number.NEGATIVE_INFINITY, rmath.divHi(x.lo, v))\n  }\n}\n\n/**\n * Division between an interval and zero\n * @param {Interval} x\n * @returns {Interval}\n */\nexport function zero(x: Interval): Interval {\n  if (x.lo === 0 && x.hi === 0) {\n    return x\n  }\n  return constants.WHOLE\n}\n","import { Interval } from '../interval'\nimport rmath from '../round'\nimport constants from '../constants'\nimport * as utils from './utils'\nimport * as arithmetic from './arithmetic'\n\n/**\n * @mixin misc\n */\n\n/**\n * Computes e^x where e is the mathematical constant equal to the base of the\n * natural logarithm\n *\n * @example\n * ```typescript\n * Interval.exp(\n *   Interval(-1, 1)\n * )  // Interval(0.3679, 2.7183)\n * ```\n *\n * @param {Interval} x\n * @return {Interval}\n */\nexport function exp(x: Interval): Interval {\n  if (utils.isEmpty(x)) {\n    return constants.EMPTY\n  }\n  return new Interval(rmath.expLo(x.lo), rmath.expHi(x.hi))\n}\n\n/**\n * Computes the natural logarithm of x\n *\n * @example\n * ```typescript\n * Interval.log(\n *   Interval(1, Math.exp(3))\n * )  // Interval(0, 3)\n * ```\n *\n * @param {Interval} x\n * @return {Interval}\n */\nexport function log(x: Interval): Interval {\n  if (utils.isEmpty(x)) {\n    return constants.EMPTY\n  }\n  const l = x.lo <= 0 ? Number.NEGATIVE_INFINITY : rmath.logLo(x.lo)\n  return new Interval(l, rmath.logHi(x.hi))\n}\n\n/**\n * Alias for {@link log}\n * @function\n */\nexport const ln = log\n\nexport const LOG_EXP_10 = log(new Interval(10, 10))\n\n/**\n * Computes the logarithm base 10 of x\n *\n * @example\n * ```typescript\n * Interval.log10(\n *   Interva(1, 1000)\n * )  // Interval(0, 3)\n * ```\n *\n * @param {Interval} x\n * @return {Interval}\n */\nexport function log10(x: Interval): Interval {\n  if (utils.isEmpty(x)) {\n    return constants.EMPTY\n  }\n  return arithmetic.div(log(x), LOG_EXP_10)\n}\n\nexport const LOG_EXP_2 = log(new Interval(2, 2))\n\n/**\n * Computes the logarithm base 2 of x\n *\n * @example\n * ```typescript\n * Interval.log10(\n *   Interva(1, 8)\n * )  // Interval(0, 3)\n * ```\n *\n * @param {Interval} x\n * @return {Interval}\n */\nexport function log2(x: Interval): Interval {\n  if (utils.isEmpty(x)) {\n    return constants.EMPTY\n  }\n  return arithmetic.div(log(x), LOG_EXP_2)\n}\n\n/**\n * Computes an interval that has all the values of x and y, note that it may be\n * possible that values that don't belong to either x or y are included in the\n * interval that represents the hull\n *\n * @example\n * ```typescript\n * Interval.hull(\n *   Interval(-1, 1),\n *   Interval(5, 7)\n * )  // Interval(-1, 7)\n * Interval.hull(\n *   Interval(-1, 1),\n *   Interval.EMPTY\n * )  // Interval(-1, 1)\n * ```\n *\n * @param {Interval} x\n * @param {Interval} y\n * @return {Interval}\n */\nexport function hull(x: Interval, y: Interval): Interval {\n  const badX = utils.isEmpty(x)\n  const badY = utils.isEmpty(y)\n  if (badX && badY) {\n    return constants.EMPTY\n  } else if (badX) {\n    return y.clone()\n  } else if (badY) {\n    return x.clone()\n  } else {\n    return new Interval(Math.min(x.lo, y.lo), Math.max(x.hi, y.hi))\n  }\n}\n\n/**\n * Computes an interval that has all the values that belong to both x and y\n *\n * @example\n * ```typescript\n * Interval.intersection(\n *   Interval(-1, 1),\n *   Interval(0, 7)\n * )  // Interval(0, 1)\n * ```\n *\n * @param {Interval} x\n * @param {Interval} y\n * @return {Interval}\n */\nexport function intersection(x: Interval, y: Interval): Interval {\n  if (utils.isEmpty(x) || utils.isEmpty(y)) {\n    return constants.EMPTY\n  }\n  const lo = Math.max(x.lo, y.lo)\n  const hi = Math.min(x.hi, y.hi)\n  if (lo <= hi) {\n    return new Interval(lo, hi)\n  }\n  return constants.EMPTY\n}\n\n/**\n * Computes an interval that has all the values that belong to both x and y,\n * the difference with {@link hull} is that x and y must overlap to\n * compute the union\n *\n * @example\n * ```typescript\n * Interval.union(\n *   Interval(-1, 1),\n *   Interval(5, 7)\n * )  // throws error\n * Interval.union(\n *   Interval(-1, 1),\n *   Interval(1, 7)\n * )  // Interval(-1, 7)\n * ```\n *\n * @throws {Error} When x and y don't overlap\n * @param {Interval} x\n * @param {Interval} y\n * @return {Interval}\n */\nexport function union(x: Interval, y: Interval): Interval {\n  if (!utils.intervalsOverlap(x, y)) {\n    throw Error('Interval#union: intervals do not overlap')\n  }\n  return new Interval(Math.min(x.lo, y.lo), Math.max(x.hi, y.hi))\n}\n\n/**\n * Computes the difference between `x` and `y`, i.e. an interval with all the\n * values of `x` that are not in `y`\n *\n * @example\n * ```typescript\n * Interval.difference(\n *   Interval(3, 5),\n *   Interval(4, 6)\n * )  // Interval(3, prev(4))\n * Interval.difference(\n *   Interval(0, 3),\n *   Interval(0, 1)\n * )  // Interval(next(1), 3)\n * Interval.difference(\n *   Interval(0, 1),\n *   Interval.WHOLE\n * )  // Interval.EMPTY\n * Interval.difference(\n *   Interval(-Infinity, 0),\n *   Interval.WHOLE\n * )  // Interval.EMPTY\n * ```\n *\n * @throws {Error} When the difference creates multiple intervals\n * @param {Interval} x\n * @param {Interval} y\n * @return {Interval}\n */\nexport function difference(x: Interval, y: Interval): Interval {\n  if (utils.isEmpty(x) || utils.isWhole(y)) {\n    return constants.EMPTY\n  }\n  if (utils.intervalsOverlap(x, y)) {\n    if (x.lo < y.lo && y.hi < x.hi) {\n      // difference creates multiple subsets\n      throw Error('Interval.difference: difference creates multiple intervals')\n    }\n\n    // handle corner cases first\n    if ((y.lo <= x.lo && y.hi === Infinity) || (y.hi >= x.hi && y.lo === -Infinity)) {\n      return constants.EMPTY\n    }\n\n    // NOTE: empty interval is handled automatically\n    // e.g.\n    //\n    //    n = difference([0,1], [0,1]) // n = Interval(next(1), 1) = EMPTY\n    //    isEmpty(n) === true\n    //\n    if (y.lo <= x.lo) {\n      return new Interval().halfOpenLeft(y.hi, x.hi)\n    }\n\n    // y.hi >= x.hi\n    return new Interval().halfOpenRight(x.lo, y.lo)\n  }\n  return x.clone()\n}\n\n/**\n * Computes the distance between the endpoints of the interval i.e. `x.hi - x.lo`\n *\n * @example\n * ```typescript\n * Interval.width(\n *   Interval(1, 2)\n * )  // 1\n * Interval.width(\n *   Interval(-1, 1)\n * )  // 2\n * Interval.width(\n *   Interval(1, 1)\n * )  // next(0) ~5e-324\n * Interval.width(\n *   Interval.EMPTY\n * )  // 0\n * ```\n *\n * @param {Interval} x\n * @returns {number}\n */\nexport function width(x: Interval): number {\n  if (utils.isEmpty(x)) {\n    return 0\n  }\n  return rmath.subHi(x.hi, x.lo)\n}\n\n/**\n * Alias for {@link  width}\n * @function\n */\nexport const wid = width\n\n/**\n * Computes the absolute value of `x`\n *\n * @example\n * ```typescript\n * Interval.abs(\n *   Interval(2, 3)\n * )  // Interval(2, 3)\n * Interval.abs(\n *   Interval(-2, 3)\n * )  // Interval(2, 3)\n * Interval.abs(\n *   Interval(-3, -2)\n * )  // Interval(2, 3)\n * Interval.abs(\n *   Interval(-3, 2)\n * )  // Interval(0, 3)\n * ```\n *\n * @param {Interval} x\n * @return {Interval}\n */\nexport function abs(x: Interval): Interval {\n  if (utils.isEmpty(x) || utils.isWhole(x)) {\n    return constants.EMPTY\n  }\n  if (x.lo >= 0) {\n    return x.clone()\n  }\n  if (x.hi <= 0) {\n    return arithmetic.negative(x)\n  }\n  return new Interval(0, Math.max(-x.lo, x.hi))\n}\n\n/**\n * Computes an interval with the maximum values for each endpoint based on `x`\n * and `y`\n *\n * @example\n * ```typescript\n * Interval.max(\n *   Interval(0, 3),\n *   Interval(1, 2)\n * )  // Interval(1, 3)\n * ```\n *\n * @param {Interval} x\n * @param {Interval} y\n * @return {Interval}\n */\nexport function max(x: Interval, y: Interval): Interval {\n  const badX = utils.isEmpty(x)\n  const badY = utils.isEmpty(y)\n  if (badX && badY) {\n    return constants.EMPTY\n  } else if (badX) {\n    return y.clone()\n  } else if (badY) {\n    return x.clone()\n  } else {\n    return new Interval(Math.max(x.lo, y.lo), Math.max(x.hi, y.hi))\n  }\n}\n\n/**\n * Computes an interval with the minimum values for each endpoint based on `x` and `y`\n *\n * @example\n * ```typescript\n * Interval.min(\n *   Interval(0, 3),\n *   Interval(1, 2)\n * )  // Interval(0, 2)\n * ```\n *\n * @param {Interval} x\n * @param {Interval} y\n * @return {Interval}\n */\nexport function min(x: Interval, y: Interval): Interval {\n  const badX = utils.isEmpty(x)\n  const badY = utils.isEmpty(y)\n  if (badX && badY) {\n    return constants.EMPTY\n  } else if (badX) {\n    return y.clone()\n  } else if (badY) {\n    return x.clone()\n  } else {\n    return new Interval(Math.min(x.lo, y.lo), Math.min(x.hi, y.hi))\n  }\n}\n\n/**\n * Creates an interval equal to `x`, equivalent to `Interval().set(x.lo, x.hi)`\n *\n * @example\n * ```typescript\n * Interval.clone(\n *   Interval(1, 2)\n * )  // Interval(1, 2)\n * Interval.clone(\n *   Interval.EMPTY\n * )  // Interval.EMPTY\n * ```\n *\n * @param {Interval} x\n * @return {Interval}\n */\nexport function clone(x: Interval): Interval {\n  // no bound checking\n  return new Interval().set(x.lo, x.hi)\n}\n","import * as utils from './utils'\nimport { Interval } from '../interval'\n\n// boost/numeric/interval_lib/compare/certain package on boost\n\n/**\n * @mixin relational\n */\n\n/**\n * Checks if the intervals `x`, `y` are equal, they're equal when\n * `x.lo === y.lo` and `x.hi === y.hi`, a corner case handled is when `x` and\n * `y` are both empty intervals\n *\n * @example\n * ```typescript\n * Interval.equal(\n *   Interval(2, 3),\n *   Interval(2, 3)\n * ) // true\n * ```\n *\n * @example\n * ```typescript\n * Interval.equal(\n *   Interval.EMPTY,\n *   Interval.EMPTY\n * ) // true\n * ```\n *\n * @param {Interval} x\n * @param {Interval} y\n * @returns {boolean}\n */\nexport function equal(x: Interval, y: Interval): boolean {\n  if (utils.isEmpty(x)) {\n    return utils.isEmpty(y)\n  }\n  return !utils.isEmpty(y) && x.lo === y.lo && x.hi === y.hi\n}\n\n// <debug>\nconst EPS = 1e-7\nfunction assert(a: any, message: string): void {\n  /* istanbul ignore next */\n  // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n  if (!a) {\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    throw new Error(message || 'assertion failed')\n  }\n}\n\nfunction assertEps(a: any, b: any): void {\n  if (!isFinite(a)) {\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    return assert(a === b, `[Infinity] expected ${a} to be ${b}`)\n  }\n  // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n  assert(Math.abs(a - b) < EPS, `expected ${a} to be close to ${b}`)\n}\n\nexport function almostEqual(x: number[] | Interval, y: number[] | Interval): void {\n  x = Array.isArray(x) ? x : x.toArray()\n  y = Array.isArray(y) ? y : y.toArray()\n  assertEps(x[0], y[0])\n  assertEps(x[1], y[1])\n}\n\nexport function assertIncludes(x: number[] | Interval, y: number[] | Interval): void {\n  // checks that `y` is included in `x` with the bounds close to `x`\n  almostEqual(x, y)\n  x = Array.isArray(x) ? x : x.toArray()\n  y = Array.isArray(y) ? y : y.toArray()\n  assert(x[0] <= y[0], `${x[0]} should be less/equal than ${y[0]}`)\n  assert(y[1] <= x[1], `${y[1]} should be less/equal than ${x[1]}`)\n}\n// </debug>\n\n/**\n * Checks if the intervals `x`, `y` are not equal i.e. when the intervals don't\n * share any value\n *\n * @example\n * ```typescript\n * Interval.notEqual(\n *   Interval(2, 3),\n *   Interval(4, 5)\n * ) // true\n * ```\n *\n * @example\n * ```typescript\n * Interval.notEqual(\n *   Interval(2, 3),\n *   Interval(3, 5)\n * ) // false\n * ```\n *\n * @example\n * ```typescript\n * Interval.notEqual(\n *   Interval(2, 4),\n *   Interval(3, 5)\n * ) // false\n * ```\n *\n * @param {Interval} x\n * @param {Interval} y\n * @returns {boolean}\n */\nexport function notEqual(x: Interval, y: Interval): boolean {\n  if (utils.isEmpty(x)) {\n    return !utils.isEmpty(y)\n  }\n  return utils.isEmpty(y) || x.hi < y.lo || x.lo > y.hi\n}\n\n/**\n * Checks if the interval `x` is less than `y` i.e. if all the values of `x`\n * are lower than the left endpoint of `y`\n *\n * @example\n * ```typescript\n * Interval.lessThan(\n *   Interval(2, 3),\n *   Interval(4, 5)\n * ) // true\n * ```\n *\n * @example\n * ```typescript\n * Interval.lessThan(\n *   Interval(4, 5),\n *   Interval(2, 3)\n * ) // false\n * ```\n *\n * @param {Interval} x\n * @param {Interval} y\n * @return {boolean}\n */\nexport function lessThan(x: Interval, y: Interval): boolean {\n  if (utils.isEmpty(x) || utils.isEmpty(y)) {\n    return false\n  }\n  return x.hi < y.lo\n}\n\n/**\n * Alias for {@link lessThan}\n * @function\n */\nexport const lt = lessThan\n\n/**\n * Checks if the interval `x` is greater than `y` i.e. if all the values of `x`\n * are greater than the right endpoint of `y`\n *\n * @example\n * ```typescript\n * Interval.greaterThan(\n *   Interval(2, 3),\n *   Interval(4, 5)\n * ) // false\n * ```\n *\n * @example\n * ```typescript\n * Interval.greaterThan(\n *   Interval(4, 5),\n *   Interval(2, 3)\n * ) // true\n * ```\n *\n * @param {Interval} x\n * @param {Interval} y\n * @return {boolean}\n */\nexport function greaterThan(x: Interval, y: Interval): boolean {\n  if (utils.isEmpty(x) || utils.isEmpty(y)) {\n    return false\n  }\n  return x.lo > y.hi\n}\n\n/**\n * Alias for {@link greaterThan}\n * @function\n */\nexport const gt = greaterThan\n\n/**\n * Checks if the interval `x` is less or equal than `y` i.e.\n * if all the values of `x` are lower or equal to the left endpoint of `y`\n *\n * @example\n * ```typescript\n * Interval.lessEqualThan(\n *   Interval(2, 3),\n *   Interval(3, 5)\n * ) // true\n * ```\n *\n * @param {Interval} x\n * @param {Interval} y\n * @return {boolean}\n */\nexport function lessEqualThan(x: Interval, y: Interval): boolean {\n  if (utils.isEmpty(x) || utils.isEmpty(y)) {\n    return false\n  }\n  return x.hi <= y.lo\n}\n\n/**\n * Alias for {@link lessEqualThan}\n * @function\n */\nexport const leq = lessEqualThan\n\n/**\n * Checks if the interval `x` is greater or equal than `y` i.e.\n * if all the values of `x` are greater or equal to the right endpoint of `y`\n * @param {Interval} x\n * @param {Interval} y\n * @return {boolean}\n */\nexport function greaterEqualThan(x: Interval, y: Interval): boolean {\n  if (utils.isEmpty(x) || utils.isEmpty(y)) {\n    return false\n  }\n  return x.lo >= y.hi\n}\n\n/**\n * Alias for {@link greaterEqualThan}\n * @function\n */\nexport const geq = greaterEqualThan\n","'use strict'\nimport { Interval } from '../interval'\nimport rmath from '../round'\nimport constants from '../constants'\n\nimport * as utils from './utils'\nimport * as arithmetic from './arithmetic'\nimport * as algebra from './algebra'\nimport * as misc from './misc'\n\n/**\n * @mixin trigonometric\n */\n\n/**\n * Checks if an interval is\n * - [-Infinity, -Infinity]\n * - [Infinity, Infinity]\n * @param {Interval} x\n * @returns {boolean}\n */\nfunction onlyInfinity(x: Interval): boolean {\n  return !isFinite(x.lo) && x.lo === x.hi\n}\n\n/**\n * moves interval 2PI * k to the right until both bounds are positive\n * @param interval\n */\nfunction handleNegative(interval: Interval): Interval {\n  if (interval.lo < 0) {\n    if (interval.lo === -Infinity) {\n      interval.lo = 0\n      interval.hi = Infinity\n    } else {\n      const n = Math.ceil(-interval.lo / constants.PI_TWICE_LOW)\n      interval.lo += constants.PI_TWICE_LOW * n\n      interval.hi += constants.PI_TWICE_LOW * n\n    }\n  }\n  return interval\n}\n\n/**\n * Computes the cosine of `x`\n *\n * @example\n * ```typescript\n * Interval.cos(\n *   Interval(0, 0)\n * ) // Interval(1, 1)\n * ```\n *\n * @example\n * ```typescript\n * Interval.cos(\n *   Interval(0, Math.PI / 2)\n * ) // Interval(0, 1)\n * ```\n *\n * @example\n * ```typescript\n * Interval.cos(\n *   Interval(3 * Math.PI / 2, 3 * Math.PI)\n * ) // Interval(-1, 1)\n * ```\n *\n * @example\n * ```typescript\n * Interval.cos(\n *   Interval(-Infinity, x)\n * )\n * // Interval(-1, 1) if x > -Infinity\n * // Interval.EMPTY otherwise\n * ```\n *\n * @example\n * ```typescript\n * Interval.cos(\n *   Interval(x, Infinity)\n * )\n * // Interval(-1, 1) if x < Infinity\n * // Interval.EMPTY otherwise\n * ```\n *\n * @param {Interval} x\n * @return {Interval}\n */\nexport function cos(x: Interval): Interval {\n  if (utils.isEmpty(x) || onlyInfinity(x)) {\n    return constants.EMPTY\n  }\n\n  // create a clone of `x` because the clone is going to be modified\n  const cache = new Interval().set(x.lo, x.hi)\n  handleNegative(cache)\n\n  const pi2 = constants.PI_TWICE\n  const t = algebra.fmod(cache, pi2)\n  if (misc.width(t) >= pi2.lo) {\n    return new Interval(-1, 1)\n  }\n\n  // when t.lo > pi it's the same as\n  // -cos(t - pi)\n  if (t.lo >= constants.PI_HIGH) {\n    const cosv = cos(arithmetic.sub(t, constants.PI))\n    return arithmetic.negative(cosv)\n  }\n\n  const lo = t.lo\n  const hi = t.hi\n  const rlo = rmath.cosLo(hi)\n  const rhi = rmath.cosHi(lo)\n  // it's ensured that t.lo < pi and that t.lo >= 0\n  if (hi <= constants.PI_LOW) {\n    // when t.hi < pi\n    // [cos(t.lo), cos(t.hi)]\n    return new Interval(rlo, rhi)\n  } else if (hi <= pi2.lo) {\n    // when t.hi < 2pi\n    // [-1, max(cos(t.lo), cos(t.hi))]\n    return new Interval(-1, Math.max(rlo, rhi))\n  } else {\n    // t.lo < pi and t.hi > 2pi\n    return new Interval(-1, 1)\n  }\n}\n\n/**\n * Computes the sine of `x`\n *\n * @example\n * ```typescript\n * Interval.sin(\n *   Interval(0, 0)\n * ) // Interval(0, 0)\n * ```\n *\n * @example\n * ```typescript\n * Interval.sin(\n *   Interval(0, Math.PI / 2)\n * ) // Interval(0, 1)\n * ```\n *\n * @example\n * ```typescript\n * Interval.sin(\n *   Interval(Math.PI / 2, Math.PI / 2)\n * ) // Interval(1, 1)\n * ```\n *\n * @example\n * ```typescript\n * Interval.sin(\n *   Interval(Math.PI / 2, -Math.PI / 2)\n * ) // Interval(-1, 1)\n * ```\n *\n * @example\n * ```typescript\n * Interval.sin(\n *   Interval(Math.PI, 3 * Math.PI / 2)\n * ) // Interval(-1, 0)\n * ```\n *\n * @param {Interval} x\n * @return {Interval}\n */\nexport function sin(x: Interval): Interval {\n  if (utils.isEmpty(x) || onlyInfinity(x)) {\n    return constants.EMPTY\n  }\n  return cos(arithmetic.sub(x, constants.PI_HALF))\n}\n\n/**\n * Computes the tangent of `x`\n *\n * @example\n * ```typescript\n * Interval.tan(\n *   Interval(-Math.PI / 4, Math.PI / 4)\n * ) // Interval(-1, 1)\n * ```\n *\n * @example\n * ```typescript\n * Interval.tan(\n *   Interval(0, Math.PI / 2)\n * ) // Interval.WHOLE\n * ```\n *\n * @example\n * ```typescript\n * Interval.tan(\n *   Interval(-Infinity, x)\n * )\n * // Interval.WHOLE if x > -Infinity\n * // Interval.EMPTY otherwise\n * ```\n *\n * @param {Interval} x\n * @return {Interval}\n */\nexport function tan(x: Interval): Interval {\n  if (utils.isEmpty(x) || onlyInfinity(x)) {\n    return constants.EMPTY\n  }\n\n  // create a clone of `x` because the clone is going to be modified\n  const cache = new Interval().set(x.lo, x.hi)\n  handleNegative(cache)\n\n  const pi = constants.PI\n  let t = algebra.fmod(cache, pi)\n  if (t.lo >= constants.PI_HALF_LOW) {\n    t = arithmetic.sub(t, pi)\n  }\n  if (t.lo <= -constants.PI_HALF_LOW || t.hi >= constants.PI_HALF_LOW) {\n    return constants.WHOLE\n  }\n  return new Interval(rmath.tanLo(t.lo), rmath.tanHi(t.hi))\n}\n\n/**\n * Computes the arcsine of `x`\n *\n * @example\n * ```typescript\n * Interval.asin(\n *   Interval(-1.57079633, 1.57079633)\n * )  // Interval(-10, 10)\n * ```\n *\n * @param {Interval} x\n * @return {Interval}\n */\nexport function asin(x: Interval): Interval {\n  if (utils.isEmpty(x) || x.hi < -1 || x.lo > 1) {\n    return constants.EMPTY\n  }\n  const lo = x.lo <= -1 ? -constants.PI_HALF_HIGH : rmath.asinLo(x.lo)\n  const hi = x.hi >= 1 ? constants.PI_HALF_HIGH : rmath.asinHi(x.hi)\n  return new Interval(lo, hi)\n}\n\n/**\n * Computes the arccosine of `x`\n *\n * @example\n * ```typescript\n * Interval.acos(\n *   Interval(0, 1)\n * )  // Interval(0, Math.PI / 2)\n * ```\n *\n * @param {Interval} x\n * @return {Interval}\n */\nexport function acos(x: Interval): Interval {\n  if (utils.isEmpty(x) || x.hi < -1 || x.lo > 1) {\n    return constants.EMPTY\n  }\n  const lo = x.hi >= 1 ? 0 : rmath.acosLo(x.hi)\n  const hi = x.lo <= -1 ? constants.PI_HIGH : rmath.acosHi(x.lo)\n  return new Interval(lo, hi)\n}\n\n/**\n * Computes the arctangent of `x`\n *\n * @example\n * ```typescript\n * Interval.atan(\n *   Interval(-1, 1)\n * )  // Interval(-0.785398163, 0.785398163)\n * ```\n *\n * @param {Interval} x\n * @return {Interval}\n */\nexport function atan(x: Interval): Interval {\n  if (utils.isEmpty(x)) {\n    return constants.EMPTY\n  }\n  return new Interval(rmath.atanLo(x.lo), rmath.atanHi(x.hi))\n}\n\n/**\n * Computes the hyperbolic sine of `x`\n *\n * @example\n * ```typescript\n * Interval.sinh(\n *   Interval(-2, 2)\n * )  // Interval(-3.6286040785, 3.6286040785)\n * ```\n *\n * @param {Interval} x\n * @return {Interval}\n */\nexport function sinh(x: Interval): Interval {\n  if (utils.isEmpty(x)) {\n    return constants.EMPTY\n  }\n  return new Interval(rmath.sinhLo(x.lo), rmath.sinhHi(x.hi))\n}\n\n/**\n * Computes the hyperbolic cosine of `x`\n *\n * @example\n * ```typescript\n * Interval.cosh(\n *   Interval(-2, 2)\n * )  // Interval(1, 3.76219569108)\n * ```\n *\n * @param {Interval} x\n * @return {Interval}\n */\nexport function cosh(x: Interval): Interval {\n  if (utils.isEmpty(x)) {\n    return constants.EMPTY\n  }\n  if (x.hi < 0) {\n    return new Interval(rmath.coshLo(x.hi), rmath.coshHi(x.lo))\n  } else if (x.lo >= 0) {\n    return new Interval(rmath.coshLo(x.lo), rmath.coshHi(x.hi))\n  } else {\n    return new Interval(1, rmath.coshHi(-x.lo > x.hi ? x.lo : x.hi))\n  }\n}\n\n/**\n * Computes the hyperbolic tangent of `x`\n *\n * @example\n * ```typescript\n * Interval.tanh(\n *   Interval(-Infinity, Infinity)\n * )  // Interval(-1, 1)\n * ```\n *\n * @param {Interval} x\n * @return {Interval}\n */\nexport function tanh(x: Interval): Interval {\n  if (utils.isEmpty(x)) {\n    return constants.EMPTY\n  }\n  return new Interval(rmath.tanhLo(x.lo), rmath.tanhHi(x.hi))\n}\n","import { IInterval as Interval } from '../IInterval'\n\n/**\n * @mixin utils\n */\n\n/**\n * Checks if `x` is an interval, `x` is an interval if it's an object which has\n * `x.lo` and `x.hi` defined and both are numbers\n *\n * @example\n * ```typescript\n * Interval.isInterval(\n *   Interval()\n * ) // true\n * Interval.isInterval(\n *   undefined\n * ) // false\n * Interval.isInterval(\n *   {lo: 1, hi: 2}\n * ) // true\n * ```\n *\n * @param  {*} x\n * @return {boolean} true if `x` is an interval\n */\nexport function isInterval(x: any): boolean {\n  return typeof x === 'object' && typeof x.lo === 'number' && typeof x.hi === 'number'\n}\n\n/**\n * Checks if `x` is empty, it's empty when `x.lo > x.hi`\n *\n * @example\n * ```typescript\n * Interval.isEmpty(\n *   Interval.EMPTY\n * ) // true\n * Interval.isEmpty(\n *   Interval.WHOLE\n * ) // false\n * Interval.isEmpty(\n *   // bypass empty interval check\n *   Interval().set(1, -1)\n * ) // true\n * ```\n *\n * @param {Interval} i\n * @returns {boolean}\n */\nexport function isEmpty(i: Interval): boolean {\n  return i.lo > i.hi\n}\n\n/**\n * Checks if an interval is a whole interval, that is an interval which covers\n * all the real numbers i.e. when `x.lo === -Infinity` and `x.hi === Infinity`\n *\n * @example\n * ```typescript\n * Interval.isWhole(\n *   Interval.WHOLE\n * ) // true\n * ```\n *\n * @param {Interval} i\n * @returns {boolean}\n */\nexport function isWhole(i: Interval): boolean {\n  return i.lo === -Infinity && i.hi === Infinity\n}\n\n/**\n * Checks if the intervals `x` is a singleton (an interval representing a single\n * value) i.e. when `x.lo === x.hi`\n *\n * @example\n * ```typescript\n * Interval.isSingleton(\n *  Interval(2, 2)\n * ) // true\n * Interval.isSingleton(\n *  Interval(2)\n * ) // true\n * ```\n *\n * @param {Interval} i\n * @returns {boolean}\n */\nexport function isSingleton(i: Interval): boolean {\n  return i.lo === i.hi\n}\n\n/**\n * Checks if zero is included in the interval `x`\n *\n * @example\n * ```typescript\n * Interval.zeroIn(\n *   Interval(-1, 1)\n * ) // true\n * ```\n *\n * @param {Interval} i\n * @returns {boolean}\n */\nexport function zeroIn(i: Interval): boolean {\n  return hasValue(i, 0)\n}\n\n/**\n * Checks if `value` is included in the interval `x`\n *\n * @example\n * ```typescript\n * Interval.hasValue(\n *   Interval(-1, 1),\n *   0\n * ) // true\n * Interval.hasValue(\n *   Interval(-1, 1),\n *   10\n * ) // false\n * ```\n *\n * @param {Interval} i\n * @param {number} value\n * @returns {boolean}\n */\nexport function hasValue(i: Interval, value: number): boolean {\n  if (isEmpty(i)) {\n    return false\n  }\n  return i.lo <= value && value <= i.hi\n}\n\n/**\n * Checks if `x` is a subset of `y`\n *\n * @example\n * ```typescript\n * Interval.hasInteravl(\n *   Interval(0, 3),\n *   Interval(1, 2)\n * ) // true\n * Interval.hasInteravl(\n *   Interval(0, 3),\n *   Interval(1, 4)\n * ) // false\n * ```\n *\n * @param {Interval} x\n * @param {Interval} y\n * @returns {boolean}\n */\nexport function hasInterval(x: Interval, y: Interval): boolean {\n  if (isEmpty(x)) {\n    return true\n  }\n  return !isEmpty(y) && y.lo <= x.lo && x.hi <= y.hi\n}\n\n/**\n * Checks if the intervals `x`, `y` overlap i.e. if they share at least one value\n *\n * @example\n * ```typescript\n * Interval.intervalsOverlap(\n *   Interval(0, 3),\n *   Interval(1, 2)\n * ) // true\n * Interval.intervalsOverlap(\n *   Interval(0, 2),\n *   Interval(1, 3)\n * ) // true\n * Interval.intervalsOverlap(\n *   Interval(0, 2),\n *   Interval(2, 3)\n * ) // true\n * Interval.intervalsOverlap(\n *   Interval(0, 1),\n *   Interval(2, 3)\n * ) // false\n * ```\n *\n * @param {Interval} x\n * @param {Interval} y\n * @returns {boolean}\n */\nexport function intervalsOverlap(x: Interval, y: Interval): boolean {\n  if (isEmpty(x) || isEmpty(y)) {\n    return false\n  }\n  return (x.lo <= y.lo && y.lo <= x.hi) || (y.lo <= x.lo && x.lo <= y.hi)\n}\n","import nextafter from 'nextafter'\n\n/**\n * @module interval-arithmetic/round-math\n */\n\nfunction identity(v: any): any {\n  return v\n}\nfunction prev(v: number): number {\n  if (v === Infinity) {\n    return v\n  }\n  return nextafter(v, -Infinity)\n}\nfunction next(v: number): number {\n  if (v === -Infinity) {\n    return v\n  }\n  return nextafter(v, Infinity)\n}\nfunction toInteger(x: number): number {\n  return x < 0 ? Math.ceil(x) : Math.floor(x)\n}\n\nconst cache = {\n  prev: prev,\n  next: next\n}\n\n/**\n * @alias module:interval-arithmetic/round-math\n */\nconst round = {\n  /**\n   * Computes the previous IEEE floating point representation of `v`\n   * @example\n   * Interval.round.safePrev(1)          // 0.9999999999999999\n   * Interval.round.safePrev(3)          // 2.9999999999999996\n   * Interval.round.safePrev(Infinity)   // Infinity\n   * @param {number} v\n   * @return {number}\n   * @function\n   */\n  safePrev: prev,\n  /**\n   * Computes the next IEEE floating point representation of `v`\n   * @example\n   * Interval.round.safeNext(1)          // 1.0000000000000002\n   * Interval.round.safeNext(3)          // 3.0000000000000004\n   * Interval.round.safeNext(-Infinity)  // -Infinity\n   * @param {number} v\n   * @return {number}\n   * @function\n   */\n  safeNext: next,\n  prev(x: number): number {\n    return cache.prev(x)\n  },\n  next(x: number): number {\n    return cache.next(x)\n  },\n\n  // prettier-ignore\n  addLo (x: number, y: number): number { return round.prev(x + y) },\n  // prettier-ignore\n  addHi (x: number, y: number): number { return round.next(x + y) },\n\n  // prettier-ignore\n  subLo (x: number, y: number): number { return round.prev(x - y) },\n  // prettier-ignore\n  subHi (x: number, y: number): number { return round.next(x - y) },\n\n  // prettier-ignore\n  mulLo (x: number, y: number): number { return round.prev(x * y) },\n  // prettier-ignore\n  mulHi (x: number, y: number): number { return round.next(x * y) },\n\n  // prettier-ignore\n  divLo (x: number, y: number): number { return round.prev(x / y) },\n  // prettier-ignore\n  divHi (x: number, y: number): number { return round.next(x / y) },\n\n  // prettier-ignore\n  intLo (x: number): number { return toInteger(round.prev(x)) },\n  // prettier-ignore\n  intHi (x: number): number { return toInteger(round.next(x)) },\n\n  // prettier-ignore\n  logLo (x: number): number { return round.prev(Math.log(x)) },\n  // prettier-ignore\n  logHi (x: number): number { return round.next(Math.log(x)) },\n\n  // prettier-ignore\n  expLo (x: number): number { return round.prev(Math.exp(x)) },\n  // prettier-ignore\n  expHi (x: number): number { return round.next(Math.exp(x)) },\n\n  // prettier-ignore\n  sinLo (x: number): number { return round.prev(Math.sin(x)) },\n  // prettier-ignore\n  sinHi (x: number): number { return round.next(Math.sin(x)) },\n\n  // prettier-ignore\n  cosLo (x: number): number { return round.prev(Math.cos(x)) },\n  // prettier-ignore\n  cosHi (x: number): number { return round.next(Math.cos(x)) },\n\n  // prettier-ignore\n  tanLo (x: number): number { return round.prev(Math.tan(x)) },\n  // prettier-ignore\n  tanHi (x: number): number { return round.next(Math.tan(x)) },\n\n  // prettier-ignore\n  asinLo (x: number): number { return round.prev(Math.asin(x)) },\n  // prettier-ignore\n  asinHi (x: number): number { return round.next(Math.asin(x)) },\n\n  // prettier-ignore\n  acosLo (x: number): number { return round.prev(Math.acos(x)) },\n  // prettier-ignore\n  acosHi (x: number): number { return round.next(Math.acos(x)) },\n\n  // prettier-ignore\n  atanLo (x: number): number { return round.prev(Math.atan(x)) },\n  // prettier-ignore\n  atanHi (x: number): number { return round.next(Math.atan(x)) },\n\n  // polyfill required for hyperbolic functions\n  // prettier-ignore\n  sinhLo (x: number): number { return round.prev((Math as any).sinh(x)) },\n  // prettier-ignore\n  sinhHi (x: number): number { return round.next((Math as any).sinh(x)) },\n\n  // prettier-ignore\n  coshLo (x: number): number { return round.prev((Math as any).cosh(x)) },\n  // prettier-ignore\n  coshHi (x: number): number { return round.next((Math as any).cosh(x)) },\n\n  // prettier-ignore\n  tanhLo (x: number): number { return round.prev((Math as any).tanh(x)) },\n  // prettier-ignore\n  tanhHi (x: number): number { return round.next((Math as any).tanh(x)) },\n\n  /**\n   * @ignore\n   * ln(power) exponentiation of x\n   * @param {number} x\n   * @param {number} power\n   * @returns {number}\n   */\n  powLo(x: number, power: number): number {\n    if (power % 1 !== 0) {\n      // power has decimals\n      return round.prev(Math.pow(x, power))\n    }\n\n    let y = (power & 1) === 1 ? x : 1\n    power >>= 1\n    while (power > 0) {\n      x = round.mulLo(x, x)\n      if ((power & 1) === 1) {\n        y = round.mulLo(x, y)\n      }\n      power >>= 1\n    }\n    return y\n  },\n\n  /**\n   * @ignore\n   * ln(power) exponentiation of x\n   * @param {number} x\n   * @param {number} power\n   * @returns {number}\n   */\n  powHi(x: number, power: number): number {\n    if (power % 1 !== 0) {\n      // power has decimals\n      return round.next(Math.pow(x, power))\n    }\n\n    let y = (power & 1) === 1 ? x : 1\n    power >>= 1\n    while (power > 0) {\n      x = round.mulHi(x, x)\n      if ((power & 1) === 1) {\n        y = round.mulHi(x, y)\n      }\n      power >>= 1\n    }\n    return y\n  },\n\n  // prettier-ignore\n  sqrtLo(x: number) { return round.prev(Math.sqrt(x)) },\n  // prettier-ignore\n  sqrtHi(x: number) { return round.next(Math.sqrt(x)) },\n\n  /**\n   * Most operations on intervals will cary the rounding error so that the\n   * resulting interval correctly represents all the possible values, this feature\n   * can be disabled by calling this method allowing a little boost in the\n   * performance while operating on intervals\n   *\n   * @see module:interval-arithmetic/round-math.enable\n   * @example\n   * var x = Interval.add(\n   *   Interval(1),\n   *   Interval(1)\n   * )\n   * x // equal to {lo: 1.9999999999999998, hi: 2.0000000000000004}\n   *\n   * Interval.round.disable()\n   * var y = Interval.add(\n   *   Interval(1),\n   *   Interval(1)\n   * )\n   * y // equal to {lo: 2, hi: 2}\n   * @function\n   */\n  disable() {\n    cache.next = cache.prev = identity\n  },\n\n  /**\n   * Enables IEEE previous/next floating point wrapping of values (enabled by\n   * default)\n   * @see module:interval-arithmetic/round-math.disable\n   * @example\n   * var x = Interval.add(\n   *   Interval(1),\n   *   Interval(1)\n   * )\n   * x // equal to {lo: 1.9999999999999998, hi: 2.0000000000000004}\n   *\n   * Interval.round.disable()\n   * var y = Interval.add(\n   *   Interval(1),\n   *   Interval(1)\n   * )\n   * y // equal to {lo: 2, hi: 2}\n   *\n   * Interval.round.enable()\n   * var z = Interval.add(\n   *   Interval(1),\n   *   Interval(1)\n   * )\n   * z // equal to {lo: 1.9999999999999998, hi: 2.0000000000000004}\n   * @function\n   */\n  enable() {\n    cache.next = next\n    cache.prev = prev\n  }\n}\n\nexport default round\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(607);\n"],"names":["root","factory","exports","module","define","amd","self","hasTypedArrays","Float64Array","DOUBLE_VIEW","UINT_VIEW","Uint32Array","buffer","n","pack","lo","hi","Buffer","writeDoubleLE","readUInt32LE","writeUInt32LE","readDoubleLE","sign","exponent","fraction","b","denormalized","doubleBits","SMALLEST_DENORM","Math","pow","UINT_MAX","x","y","isNaN","NaN","piLow","piHigh","constants","PI_LOW","PI_HIGH","PI_HALF_LOW","PI_HALF_HIGH","PI_TWICE_LOW","PI_TWICE_HIGH","E","Interval","prev","next","PI","PI_HALF","PI_TWICE","ZERO","ONE","WHOLE","setWhole","EMPTY","setEmpty","round","MixedInterval","Object","assign","misc","utils","relational","arithmetic","algebra","trigonometric","_Interval","constructor","this","console","log","isInterval","isSingleton","TypeError","Array","isArray","singleton","v","set","bounded","boundedSingleton","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","open","safeNext","safePrev","halfOpenLeft","halfOpenRight","toArray","clone","Class","_Class","len","arguments","length","rest","key","Function","prototype","bind","apply","concat","bindNew","multiplicativeInverse","isEmpty","zeroIn","divHi","divLo","nthRoot","power","isSafeInteger","yl","powHi","yh","powLo","yp","yn","yb","ceil","floor","sub","mul","max","warn","subtract","subLo","subHi","multiply","xl","xh","out","min","mulLo","mulHi","divide","division","zero","negative","positive","nonZero","addLo","addHi","div","l","logLo","logHi","width","exp","expLo","expHi","ln","LOG_EXP_10","LOG_EXP_2","badX","badY","intervalsOverlap","Error","isWhole","Infinity","wid","assert","a","message","assertEps","isFinite","abs","almostEqual","lessThan","greaterThan","lessEqualThan","greaterEqualThan","lt","gt","leq","geq","onlyInfinity","handleNegative","interval","cos","cache","pi2","t","fmod","cosv","rlo","cosLo","rhi","cosHi","pi","tanLo","tanHi","asinLo","asinHi","acosLo","acosHi","atanLo","atanHi","sinhLo","sinhHi","coshLo","coshHi","tanhLo","tanhHi","i","hasValue","value","identity","toInteger","intLo","intHi","sinLo","sin","sinHi","tan","asin","acos","atan","sinh","cosh","tanh","sqrtLo","sqrt","sqrtHi","disable","enable","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}